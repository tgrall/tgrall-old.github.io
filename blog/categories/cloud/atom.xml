<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cloud | Tug's Blog]]></title>
  <link href="http://tgrall.github.io/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://tgrall.github.io/"/>
  <updated>2019-09-05T15:56:33+02:00</updated>
  <id>http://tgrall.github.io/</id>
  <author>
    <name><![CDATA[Tug Grall]]></name>
    <email><![CDATA[tugdual@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multi-Nodes Redis Cluster With Docker]]></title>
    <link href="http://tgrall.github.io/blog/2019/09/05/multi-nodes-redis-cluster-with-docker/"/>
    <updated>2019-09-05T11:33:56+02:00</updated>
    <id>http://tgrall.github.io/blog/2019/09/05/multi-nodes-redis-cluster-with-docker</id>
    <content type="html"><![CDATA[<p>As part of my on-boarding/training at RedisLabs I continue to play with the product, and I have decided today to install a local 3 nodes cluster of Redis Enterprise Server (RS); and show how easy is to move from a single node/shard database to a multi nodes highly available one.</p>

<p>Once your cluster is up &amp; running, you will kill some containers to see how the system automatically fail-over to guarantee service continuity.</p>

<p>The deployment will look more or less like the schema below, (<em><a href="https://docs.redislabs.com/latest/rs/getting-started/docker/">coming from RedisLabs documentation</a></em>)</p>

<p><img class="center" src="/images/posts/multi-nodes-redis-cluster-with-docker/docker-deployment.png"></p>

<p><strong>Prerequisites:</strong></p>

<p><em>Docker Desktop (</em>I am running Docker on Mac*)</p>

<!--more-->


<h3>Installing and Running your First Redis Node</h3>

<p>As usual, installing a new product with Docker is very simple just run the following command:</p>

<pre><code class="bash">docker run -d --cap-add sys_resource \
--name  redis-node1 \
-p 8443:8443 \
-p 9443:9443 \
-p 12000:12000 \
redislabs/redis
</code></pre>

<p>Let&rsquo;s look at the parameters used here:</p>

<ul>
<li><code>-d</code>: run the container in the background</li>
<li><code>--cap-add sys_resource</code>: add Linux  <code>sys_resource</code>capabilities to set proper privileges</li>
<li><code>--name  redis-node1</code>: naming the container</li>
<li><code>-p 8443:8443</code>: to access the management web UI (HTTPS)</li>
<li><code>-p 9443:9443</code>: to access the REST API (HTTPS)</li>
<li><code>-p 12000:12000</code>: the TCP port that we will use for the database endpoint on this node</li>
<li><code>redislabs/redis</code>: use the RedisLabs image (the enterprise version of Redis)</li>
</ul>


<h4>Creating a new Cluster</h4>

<p>Once the container is started you can configure the &ldquo;cluster&rdquo;.</p>

<ol>
<li>Go top <a href="https://localhost:8443/">https://localhost:8443/</a> (accept the connect using the temporary certificate)</li>
<li>Click &ldquo;Setup&rdquo;</li>
<li>Change the Cluster Name to &ldquo;my-redis-cluster.tug-demo.com&rdquo;</li>
<li>Click &ldquo;Next&rdquo;</li>
<li>On the &ldquo;cluster authentication&rdquo; click &ldquo;Next&rdquo;  <em>(we will be using the free version)</em></li>
<li>Enter the user admin credentials and click &ldquo;Next&rdquo;.</li>
</ol>


<p>Once it is configured, connect to the console to the console using the credentials you have created.</p>

<h4>Adding a new database</h4>

<p>Now you have to create a new database.</p>

<ol>
<li>Select &ldquo;Redis Database&rdquo; and &ldquo;Single Region&rdquo;</li>
<li>Enter the name &ldquo;test-db-001&rdquo;, and &ldquo;0.5&rdquo; for the memory limit</li>
<li>Click &ldquo;Show Advanced Options&rdquo;</li>
<li>Enter 12000 in the &ldquo;Endpoint port number&rdquo; field</li>
<li>Click &ldquo;Activate&rdquo;.</li>
</ol>


<p>After  fewseconds, the database is created and available.</p>

<p>Note: we have not set anything special around clustering and replication; we will do that later.</p>

<h4>Using the Single Node Database</h4>

<p>You can now connect to the database. You can use  <code>redis-cli</code>from your host, or you can connect to the container and do it from there:</p>

<pre><code class="bash">&gt; docker  exec-it redis-node1 /bin/bash

redislabs@0a174e819a6b:/opt$ redis-cli -p 12000

127.0.0.1:12000&gt; SET foo bar
OK

127.0.0.1:12000&gt; GET foo
"bar"

127.0.0.1:12000&gt;  exit
</code></pre>

<p><strong><em>Checkpoint</em></strong></p>

<p>So far you have:</p>

<ol>
<li>Install a single node cluster of Redis Enterprise using Docker</li>
<li>Create a new cluster</li>
<li>Created a database that listens on port 12000.</li>
</ol>


<p>In the container, run the  <code>rladminstatus</code>command, to get information about your deployment.</p>

<p><img class="center" src="/images/posts/multi-nodes-redis-cluster-with-docker/rladmin-status.png"></p>

<p>In the cluster node section, you can see the address of the node, 172.17.0.2 in my case. This is the IP address of the container, that will be used to create the multi-node cluster.</p>

<p>It is time to add new nodes to the cluster and enable replication and sharding</p>

<h3>Adding new nodes</h3>

<p>To add new nodes to the cluster, you start new containers. Since the 3 containers will be running on the same host, it is necessary, to avoid conflicts, to use different mapping to the Web UI, REST API, and database endpoint ports.</p>

<p><strong>Start node 2:</strong></p>

<pre><code class="bash">docker run -d --cap-add sys_resource \
--name redis-node2 \
-p 8444:8443 \
-p 9444:9443 \
-p 12001:12000 \
redislabs/redis
</code></pre>

<p><strong>Start node 3:</strong></p>

<pre><code class="bash">docker run -d --cap-add sys_resource \
--name redis-node3 \
-p 8445:8443 \
-p 9445:9443 \
-p 12002:12000 \
redislabs/redis
</code></pre>

<p>So to configure each node you need to use the URLs:</p>

<ul>
<li>node 2: <a href="https://localhost:8444/">https://localhost:8444/</a></li>
<li>node 3: <a href="https://localhost:8445/">https://localhost:8445/</a></li>
</ul>


<p>I have just increase the port number of the Web UI (8443: node 1, 8444: node 2, 8445 node 3).</p>

<p>For these 2 new nodes, do the following steps to add them to the cluster:</p>

<ol>
<li>Click &ldquo;Setup&rdquo;</li>
<li>In  clusterconfiguration, select &ldquo;Join Cluster&rdquo;,

<ul>
<li>Enter the IP address of the first node, 172.17.0.2 in my environment</li>
<li>Enter the credentials you have used during the installation of the first node.</li>
</ul>
</li>
<li>Click &ldquo;Next&rdquo;</li>
</ol>


<p>After a few seconds, you will be redirected to the home page and see the list of nodes of your cluster.</p>

<p>Repeat the same steps for the third node.</p>

<p>Your environment should look like this after the installation and configuration of the 3 nodes.</p>

<p><img class="center" src="/images/posts/multi-nodes-redis-cluster-with-docker/cluster-view-3-nodes.png"></p>

<p>You can also reuse the  <code>rladminstatus</code>command on one of the containers and see the new configuration.</p>

<p>If you look carefully, you can see that you have only 1 shard in your cluster. Let&rsquo;s now add a new shard to the database.</p>

<p><strong>Enabling Clustering and Replication to the DB</strong></p>

<p>In the Redis Enterprise Admin Web UI, (<em>you can use any of the nodes</em>):</p>

<ol>
<li>Click on the &ldquo;databases&rdquo; tab</li>
<li>Click on &ldquo;test-db-001&rdquo; database</li>
<li>Click on the &ldquo;configuration&rdquo;</li>
<li>Go to the bottom of the page and click &ldquo;Edit&rdquo;</li>
<li>Check the &ldquo;Replication&rdquo; checkbox, to create new shard that will be a replica, to provide high availability</li>
<li>Check &ldquo;Database Clustering&rdquo; and increase the number of shards to 2. This will  <em>distribute</em>the data in your database into 2 shards, this for better scalability.
 <em>You can see that the UI indicated that you have  </em>4 shards with replication*. Yes because you have a database that you have &ldquo;divided in 2&rdquo;, and each of the portions of the database is replicated.
(Also with the free version of Redis Enterprise you are limited to 4 shards, so do not be surprised if you can not increase the number of shards to more than 4)</li>
<li>Click &ldquo;Update&rdquo; at the bottom of the page.</li>
</ol>


<p>Go back to the &ldquo;nodes&rdquo; tab, and you will see that you have now 4 shards distributed on your 3 nodes.</p>

<p><strong>Discovering the cluster topology</strong></p>

<p>Run  <code>rladminstatus</code>to inspect your cluster and see how the various components are installed:</p>

<p><img class="center" src="/images/posts/multi-nodes-redis-cluster-with-docker/rladmin-status-with-db.png"></p>

<p>For example, you can see, that in my environment:</p>

<p><em>in the &ldquo;CLUSTER NODES&rdquo; section that the &ldquo;node:1&rdquo; is the master of the cluster
</em>in the &ldquo;DATABASES&rdquo; section that replication is enabled, and the database uses a &ldquo;<a href="https://docs.redislabs.com/latest/rs/concepts/rebalancing-shard-placement/#dense-shard-placement-policy">dense placement</a>&rdquo;
<em>in the &ldquo;SHARDS&rdquo; section you can see the various shards and their placement (</em>node:1|2|3<em>), their role (</em>master|slave*) and their slots.</p>

<p>Using Redis Enterprise Enterprise Software (RS), all the clustering is managed transparently for you, and your applications. This means that you just have to connect your application to RS Cluster.</p>

<p><strong>Clustering in Action</strong></p>

<p>First of all, you have already seen a lot, just using the Web UI (and you could have done it using CLI and REST API), you have moved an existing database from a single instance to a distributed and highly available instance.</p>

<p>So now if something happens to the system, for example, if one of the masters disappears RS will automatically get another  oneelected.</p>

<p>Let me kill for example the node 3 that contains the 2 masters for my database.</p>

<pre><code class="bash">&gt; docker  killredis-node3
</code></pre>

<p>After a few seconds, you should see that the master shards are now on another node, in my case node:1.</p>

<p><img class="center" src="/images/posts/multi-nodes-redis-cluster-with-docker/rladmin-status-with-db-002.png"></p>

<p>So if an application, is using this cluster it would be almost transparent as the election of the new master is happening in the  backgroud.</p>

<p>If you restart the node 3 it will rejoin the cluster, and the replicas will be updated on node 3 with any changes that happened to the masters.</p>

<pre><code class="bash">&gt; docker start  redis-node3
</code></pre>

<p>The same automatic fail-over will happen if you kill a node with the cluster  manager,or the endpoint.</p>

<h4>Conclusion</h4>

<p>In this small article you have learned how to:</p>

<ul>
<li>deploy a 3 nodes Redis Enterprise Server (RS) on Docker (on a single host)</li>
<li>create a database, and make it highly available and distributed easily using the Admin UI</li>
<li>look at the deployment using  <code>rladminstatus</code>command.</li>
</ul>


<p>You have also seen, by killing some nodes, how the cluster fail-over will various master services (shards, endpoint, master cluster node) to another node automatically. This to ensure a continuity of service for your application.</p>

<p>In another  postI will show what is the exact behavior of client applications during the fail-over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Your Node/Couchbase Application to the Cloud With Clever Cloud]]></title>
    <link href="http://tgrall.github.io/blog/2013/07/11/deploy-your-node-slash-couchbase-application-to-the-cloud-with-clever-cloud/"/>
    <updated>2013-07-11T06:47:51+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/07/11/deploy-your-node-slash-couchbase-application-to-the-cloud-with-clever-cloud</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><a href="http://www.clever-cloud.com/en/">Clever Cloud</a> is the first PaaS to provide Couchbase as a service allowing developers to run applications in a fully managed environment. This article shows how to deploy an existing application to Clever Cloud.</p>

<p><img class="<a" src="href="http://f.cl.ly/items/2L2M2k2O000e3g2N1z3z/couchbase_gradient_clever.png">http://f.cl.ly/items/2L2M2k2O000e3g2N1z3z/couchbase_gradient_clever.png</a>&#8221;></p>

<p>I am using a very simple Node application that I have documented in a previous article: “<a href="http://tugdualgrall.blogspot.fr/2013/03/easy-application-development-with.html">Easy application development with Couchbase, Angular and Node</a>”.</p>

<p>Clever Cloud provides support for various databases MySQL, PostgreSQL, but also and this is most important for me <a href="http://www.clever-cloud.com/en/services/couchbase.html">Couchbase</a>. No only Clever Cloud allows you to use database services but also you can deploy and host your application that could be developed in the language/technology of your choice : Java, Node, Scala, Python, PHP, … and all this in a secure, scalable and managed environment.</p>

<!-- more -->


<h3>Setting up your Clever Cloud environment</h3>

<h4>Create your account</h4>

<ol>
<li>Go to the Clever Cloud site :<a href="http://www.clever-cloud.com/"> http://www.clever-cloud.com/</a></li>
<li>Click on “Login” link and follow the steps to create your account.</li>
<li>After few seconds you will received an email and be redirected to the Clever Cloud Console.</li>
</ol>


<h4>Create a Couchbase instance</h4>

<p>The <a href="https://console.clever-cloud.com/">Clever Cloud Console</a> allows you to create your Couchbase Bucket in few clicks:</p>

<p>1-  Cick on “Services” in the left menu</p>

<p>2-  Click on “Add a Service” in the left menu </span></p>

<p><img class="<a" src="href="http://4.bp.blogspot.com/-He8scPOrH5I/Uac5B_O2k3I/AAAAAAAAAcE/OZyn8jW-bV8/s320/clever-cloud-add-couchbase.png">http://4.bp.blogspot.com/-He8scPOrH5I/Uac5B_O2k3I/AAAAAAAAAcE/OZyn8jW-bV8/s320/clever-cloud-add-couchbase.png</a>&#8221;></p>

<p>3- Click on “Couchbase” button.</p>

<ol>
<li>Select the size of the RAM quota for your bucket</li>
</ol>


<p><img class="<a" src="href="http://4.bp.blogspot.com/-V_GMolXLClI/Uac5CMdKQoI/AAAAAAAAAcM/vvGKJUXW-xQ/s320/Screen+Shot+2013-05-30+at+9.19.59+AM.png">http://4.bp.blogspot.com/-V_GMolXLClI/Uac5CMdKQoI/AAAAAAAAAcM/vvGKJUXW-xQ/s320/Screen+Shot+2013-05-30+at+9.19.59+AM.png</a>&#8221;></p>

<p>The size of the RAM Quota for your bucket will have an impact on performance but also on the pricing.</p>

<p>5- Click “Add this Service”</p>

<p>You are done, you should receive an email with all the information to access your newly created bucket.</p>

<p>The mail from Clever Cloud contains the following information:</p>

<pre><code>db_host = xxxxxxxx.couchbase.clvrcld.net    Location of the database, this is where the endpoint is located.
db_name = yyyyyyyy  Name of the Couchbase bucket
db_username = xxxxxxxx  Not used in Couchbase context
db_password = zzzzzzzz  Password to connect to the Couchbase Bucket
</code></pre>

<p>So you are now ready to use your bucket.</p>

<p>Note: In the current version of the Clever Cloud Couchbase Service you do not have access to a management console. If you want to get some information about the database or create views you need to do it from you application code.</p>

<h4>Connect your Application to Couchbase@Clever-Cloud</h4>

<p>The first step is to get some code, so let’s clone the “Couchbase Ideas Sample Application”, and install the dependencies, using the following commands:</p>

<pre><code>git clone -b 03-vote-with-value https://github.com/tgrall/couchbase-node-ideas.git

cd couchbase-node-ideas

git branch mybranch

git checkout mybranch

npm install
</code></pre>

<p>Open the app.js and edit the connection info to point your application to the Couchbase instance and modify the HTTP port of your application to 8080 - this is a mandatory step documented <a href="http://doc.clever-cloud.com/nodejs/nodejs/#requirements">here</a> :</p>

<pre><code class="js">dbConfiguration = {
  "hosts": ["xxxxxxxxxxx.couchbase.clvrcld.net:8091"],
  "bucket": "xxxxxxxxxxx",
  "user": "xxxxxxxxxx",
  "password": "yyyyyyyyyyyyyyyyyyyyyyyyy"
};
...
...

appServer = app.listen(8080, function() {
  console.log("Express server listening on port %d in %s mode", appServer.address().port, app.settings.env);
});
</code></pre>

<p>Launch your application using</p>

<pre><code>node app.js
</code></pre>

<p>Go to <a href="http://localhost:8080">http://localhost:8080</a></p>

<p>Your application is now using Couchbase on the cloud powered by Clever Cloud. Let’s now deploy the application itself on Clever Cloud</p>

<h3>Deploy your application on Clever Cloud</h3>

<p>The easiest way to deploy an application to Clever Cloud is using git. The first thing to do is to add your SSH public key into Clever Cloud Console. If you do not have any SSH yet, follow the steps described on Github : “<a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a>”.</p>

<h4>Add your SSH key</h4>

<p>Note: As you can guess this should be done only once</p>

<p>Open the id_rsa.pub file with a text editor. This is your SSH key. Select all and copy to your clipboard.</p>

<ol>
<li>Go to the Clever Cloud Console</li>
<li>Click on “Profile” entry in the left menu</li>
<li>Click on “SSH Keys”</li>
<li>Click on “Add a SSH Key”</li>
<li>Enter a name (anything you want) and paste your key</li>
<li>Click “Add” button</li>
</ol>


<p>You are now ready to deploy applications to Clever Cloud. The next thing to do, is to create a new node application in Clever Cloud.</p>

<h4>Create your Application</h4>

<ol>
<li>Click “Add an app” in the Application menu in the top menu.</li>
<li>Give a name and description to this application</li>
<li>Select the Instance type, in this case “Node.js”</li>
<li>Configure your instances, you can keep the default values for now, click “Next”</li>
<li>Check the configuration, and click “Create”</li>
</ol>


<p>Your application is created, you are redirected to the generic information page, where you can find a Git URL that we will use to deploy the application.</p>

<p>You can navigate into the entries in the left menu to see more information about your application. In addition to the Information page, you can look at the following entries:</p>

<ol>
<li>“Domain Names” to configure the URL to access your application</li>
<li>“Logs” to view the application logs</li>
</ol>


<h4>Deploy the Application</h4>

<p>So we are almost there!</p>

<p>The deployment to Clever Cloud is done using a Git push command, so you need to add the deployment URL as a remote repository to your application, using the following command:</p>

<pre><code>git remote add clever git+ssh://git@push.clever-cloud.com/app_[your_app_id].git

git commit -a -m “Couchbase on Clever Cloud connection”

git push clever mybranch:master
</code></pre>

<p>Once you have added the application as remote repository you can commit and push your application.</p>

<p>The last command pushes the application  to Clever Cloud. It is important to note that Clever Cloud will always deploy the application on the “master” branch on the remote repository. The notation mybranch:master is used to mention it. If you work locally on your master branch just use “master”.</p>

<p>You can now go to the Clever Cloud console and look in the log and click on the URL in the “Domain Names” section to test your application.</p>

<p>You should be able to see your application, that is running on the Clever Cloud PaaS.</p>

<p>When you update your application, you just need to do a  git push and git commit.</p>

<h3>Conclusion</h3>

<p>In this tutorial you have learned how to:</p>

<ul>
<li>Create your Clever Cloud account</li>
<li>Create a Couchbase instance</li>
<li>Create and deploye a Node.js application</li>
</ul>


<p>Feel free to test this yourself, with Node or other technology, as you can see it is quite easy to setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAP Cloud Inside : Build and Run Applications in the Cloud]]></title>
    <link href="http://tgrall.github.io/blog/2012/02/19/sap-cloud-inside-build-and-run-applications-in-the-cloud/"/>
    <updated>2012-02-19T23:56:56+01:00</updated>
    <id>http://tgrall.github.io/blog/2012/02/19/sap-cloud-inside-build-and-run-applications-in-the-cloud</id>
    <content type="html"><![CDATA[<p>Last week I was invited to present eXo Cloud IDE during the SAP Cloud Inside. This SAP Community event was a great opportunity to discuss about the cloud with an interesting point of view: the impact of the cloud for SAP customers (especially administrators and developers).</p>

<p>During this presentation I have introduced the <a href="http://www.cloud-ide.com/">eXo Cloud IDE</a>, and I did a demonstration in which O have built and deployed applications : Open Social Gadgets, Ruby on Rails and Java/Spring, and explain how it could be extended to SAP business services.</p>

<p>Here the slides that I have used during this presentation:</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/95672 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<p><strong><a href="http://www.slideshare.net/tgrall/sap-cloud-inside-develop-and-deploy-on-the-cloud" title="SAP Cloud Inside : Develop and Run on the Cloud">SAP Cloud Inside : Develop and Run on the Cloud</a></strong></p>

<p>Remember that you can register yourself to the <a href="http://www.cloud-ide.com/">eXo Cloud IDE</a> Service and start develop application from your browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eXo Cloud IDE : Develop for the Cloud on the Cloud]]></title>
    <link href="http://tgrall.github.io/blog/2011/03/16/exo-cloud-ide-develop-for-the-cloud-on-the-cloud/"/>
    <updated>2011-03-16T12:55:44+01:00</updated>
    <id>http://tgrall.github.io/blog/2011/03/16/exo-cloud-ide-develop-for-the-cloud-on-the-cloud</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://1.bp.blogspot.com/-IgPlseainto/TYBq0-Sr6nI/AAAAAAAAAOw/YL3TECcXJts/s400/logoexoplatform.png">http://1.bp.blogspot.com/-IgPlseainto/TYBq0-Sr6nI/AAAAAAAAAOw/YL3TECcXJts/s400/logoexoplatform.png</a>&#8221;></p>

<p>Yesterday, eXo has launched a new cloud based service: the <a href="http://www.cloud-ide.com/">eXo Cloud IDE</a>. This IDE is an online service that facilitates the development of gadgets and mashups that could be deployed directly to a PaaS.</p>

<p>Before launching this service on the Cloud we, eXo team and customers, have used the IDE embedded in the <a href="http://www.exoplatform.com/company/en/platform/exo-platform-35">eXo Platform</a> to extend our intranet and customer deployments (some of the modules that we have developed live on our intranet are available as plugins on the <a href="http://www.exoplatform.com/company/en/Content-types/Plugins">eXo Resource Center</a>).</p>

<p>This IDE is the last mile between the users and the developers. It provides a way to add new services asked by business users at a lower cost with a good time to market. And all this based on standards that corporate and Web developers like : REST Services using <a href="http://jcp.org/en/jsr/detail?id=311">JAX-RS</a> and UI based on <a href="http://www.opensocial.org/">OpenSocial</a> gadgets in which you can leverage all the cool and powerful features of HTML5.</p>

<p>What eXo has launched yesterday is a big step for developers since you can now develop, test and deploy your gadgets and services online, and this in your &ldquo;personal environment&rdquo; using eXo Cloud IDE supports multi-tenancy. I won&rsquo;t go in all the features of the IDE since you can test it yourself by joining the <a href="http://cloud-ide.com/">beta program</a> and look at this video:</p>

<p><iframe src="http://player.vimeo.com/video/20815141?portrait=0"  width="550" height="265" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe></p>

<p>eXo Cloud IDE resources:</p>

<ul>
<li>Overview of <a href="http://www.exoplatform.com/company/en/platform/exo-platform-35">eXo Platform 3.5</a></li>
<li>Overview of <a href="http://cloud-ide.com/">eXo Cloud IDE</a>, including how-to videos and sample applications</li>
<li>Join the <a href="http://cloud-ide.com/">eXo Cloud IDE private beta</a></li>
<li>Benjamin Mestrallet’s <a href="http://blog.exoplatform.org/2011/03/15/history-of-exo-cloud-ide/">blog post</a> about eXo Cloud IDE</li>
<li><a href="http://www.exoplatform.com/exo-platform-3-trial/eXoPlatform-3.zip">Evaluation download</a> of eXo Platform 3.0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create and Deploy a JAX-RS REST Service on Google App Engine]]></title>
    <link href="http://tgrall.github.io/blog/2010/02/28/create-and-deploy-a-jax-rs-rest-service-on-google-app-engine/"/>
    <updated>2010-02-28T05:33:10+01:00</updated>
    <id>http://tgrall.github.io/blog/2010/02/28/create-and-deploy-a-jax-rs-rest-service-on-google-app-engine</id>
    <content type="html"><![CDATA[<p>In this article you will learn how to create a REST service using JAX-RS reference implementation (Jersey) and deploy it on Google AppEngine.</p>

<h3>Prerequisites</h3>

<p>For this tutorial you will need:</p>

<ul>
<li>a Google AppEngine account : <a href="http://code.google.com/appengine/">http://code.google.com/appengine/</a></li>
<li>Eclipse Galileo (3.5.x)</li>
<li>Google App Engine SDK for Java</li>
</ul>


<!-- more -->


<ul>
<li>Install the Google Plugin for Eclipse as documented <a href="http://code.google.com/eclipse/docs/install-eclipse-3.5.html">here</a> (Check that you are using the release 1.3.1 of the GAE Java SDK, if not download it and configure the plugin to use it)

<ul>
<li>it is also useful to have the AppEngine documentation locally, you can download it from <a href="http://code.google.com/appengine/downloads.html#Download_the_Google_App_Engine_Documentation">here</a>.</li>
<li>JAX-RS Reference Implementation, be sure you take the
Jersey 1.1.5 release. You can download it from <a href="https://jersey.dev.java.net/">here</a>.</li>
<li>Unzip the file in a directory that we will call <code>$JERSEY_HOME</code></li>
<li>JAXB 2.2 Implementation to simplify the marshalling/unmarshalling of the XML, and also facilitate the JSON support. Download it from <a href="https://jaxb.dev.java.net/">here</a></li>
</ul>
</li>
</ul>


<h3>Creating new application</h3>

<p>To create a new App Engine project in Eclipse:</p>

<p>1-  Click on the &ldquo;<strong>New Web Application Project</strong>&rdquo; button <img src="http://2.bp.blogspot.com/_aoQgQ1obiyE/S4pv-VRkifI/AAAAAAAAAKc/cNoURwz9n8M/s320/new_app_button.png" alt="" /> in the toolbar . It is also possible to do it using the menu <strong>File &gt; Web Application Project</strong></p>

<p>2-  The &ldquo;Create a Web Application Project&rdquo; wizard opens:</p>

<ul>
<li>Project Name: <code>EmployeeService</code></li>
<li>Package : <code>com.grallandco.employee.service</code></li>
<li>Uncheck &ldquo;<code>Use Google Web Toolkit</code>&rdquo;</li>
<li>Check that the SDK version your are using is &ldquo;<code>App Engine 1.3.0</code>&rdquo;; if not configure the project to use it.</li>
<li>The screen should look like the following screen :</li>
</ul>


<p><img class="<a" src="href="http://3.bp.blogspot.com/_aoQgQ1obiyE/S4pu9erB81I/AAAAAAAAAKE/ER3aDZKd520/s320/app-engine-wizard.png">http://3.bp.blogspot.com/_aoQgQ1obiyE/S4pu9erB81I/AAAAAAAAAKE/ER3aDZKd520/s320/app-engine-wizard.png</a>&#8221;></p>

<ul>
<li>Click Finish</li>
<li>The project should look like the following screen :</li>
</ul>


<p><img class="<a" src="href="http://4.bp.blogspot.com/_aoQgQ1obiyE/S4pvDuZVWQI/AAAAAAAAAKM/8I2aUTtx7Os/s320/project-structure.png">http://4.bp.blogspot.com/_aoQgQ1obiyE/S4pvDuZVWQI/AAAAAAAAAKM/8I2aUTtx7Os/s320/project-structure.png</a>&#8221;></p>

<h4>Running the application</h4>

<p>The App Egine SDK, installed with the Eclipse plugin contains a Web server (based on Jetty), that could be used for testing and debugging. To test that your application has been created correctly select the menu <strong>Run &gt; Run As &gt; Web Application</strong>. I personally most of the time run my server using the debug command <strong>Run &gt; DebugAs &gt; Web Application</strong>. In debug mode you can change source code and test is without restarting the server.</p>

<p>The web server is starting automatically, you should see the following messagein the Eclipse console</p>

<p>The server is runningat <code>http://localhost:8080/</code></p>

<p>You can access the application, and the sample servlet that has been created using the URL: <code>http://localhost:8080/employeeservice</code>.</p>

<p>To stop the server, click on the terminate button <img class="<a" src="href="http://1.bp.blogspot.com/_aoQgQ1obiyE/S4pvYft_VPI/AAAAAAAAAKU/UCNDdfNlEnM/s320/terminate_button.png">http://1.bp.blogspot.com/_aoQgQ1obiyE/S4pvYft_VPI/AAAAAAAAAKU/UCNDdfNlEnM/s320/terminate_button.png</a>&#8221;> in the Eclipse console.</p>

<h3>Configuring the REST support in the application</h3>

<p>To be able to create and run REST services in your application you need to:</p>

<ul>
<li>Add the JAX-RS, JAXB Jars in your project and application</li>
<li><p>Configure the web application (web.xml) to handle REST requests <strong>Add JAX-RS, JAXB to your project</strong></p></li>
<li><p>Right click on the project and select menu entry <strong>Build Path &gt; Configure Build Path&hellip;</strong></p></li>
<li>Click on the Add External JARs button</li>
<li>Select all the JARs located in $JERSEY_HOME/lib and $JAXB_HOME/lib folders. You can for better visibility and reuse create a user library with all these JARs</li>
<li>You also need to copy the JARs in the web-inf/lib directory of your application, this step is mandatory to be sure that the JARs are included in the application when deployed to App Engine.
<em>Note: I do not like this step. I would prefer to do that by configuration of the build path, to automatically add the JARs to the WEB-INF/lib directory when executing/deploying the application. Unfortunately I did not find the way to do it, so if you know it, feel free to post a comment and I will
update the article.</em></li>
</ul>


<p><strong>Configure the web application</strong></p>

<p>In this step you will register a new URI to handle REST requests. To do that you need to register a new servlet that is using the Jersey API and configure it to a specific URI (eg: /ressources  and/or /rest) and configure what are the Java packages that contain the REST implementation classes. So you need to modify the web.xml of your application with the following entries:</p>

<pre><code class="xml">&lt;servlet&gt;
  &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;
  &lt;servlet-class&gt;com.sun.jersey.spi.container.servlet.ServletContainer&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;
    &lt;param-value&gt;com.grallandco.employee.service.rest.impl&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;
  &lt;url-pattern&gt;/resources/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;
  &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>This servlet that will answer to the /resources/ and /rest/ URL. The configuration parameter <code>com.sun.jersey.config.property.packages</code> is used by Jersey to list the packages where REST services implementation are located.Note that you can put as many package as you need to, you just need to separate the package names by a ; .</p>

<h3>Creating a simple REST Service to test the environment</h3>

<p>The project is now ready to contain REST service. It is time to create  one.Create for example the class <code>com.grallandco.employee.service.rest.impl.HelloWorldResource</code>, be sure to use the package name that you have configured in the web.xml for the Jersey servlet, based on the configuration we have made in previous step the package is <code>com.grallandco.employee.service.rest.impl</code></p>

<p>Here a sample class with the JAX-RS annotations:</p>

<pre><code class="java">package com.grallandco.employee.service.rest.impl;
import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.Produces;
@Path("/hr/")
public class EmployeeResource {

  @GET
  @Produces("text/plain")
  @Path("/employee")
  public String getEmployee() {
    return "Hello World!";
  }
}
</code></pre>

<p>You should be able to test it, stop the server and run it again, enter the following URL in your browser:</p>

<p><code>http://localhost:8080/resources/hr/employee</code></p>

<p>or</p>

<p><code>http://localhost:8080/rest/hr/employee</code></p>

<h4>Deploying the application to Google App Engine</h4>

<p>Before deploying the application you need to register a new application in Google App Engine using the Administartion Console, see the documentation <a href="http://code.google.com/appengine/docs/theadminconsole.html">here</a>. In my example I have used &ldquo;<code>tugdual</code>&rdquo; as Application ID.</p>

<p>You can easily now deploy the application to Google App Engine by clicking on the  &ldquo;Deploy App Engine Project&rdquo; button <img src="../../google-rest-crud/img/ae_deploy_button.png" title="Deploy App Engine Project Button" alt="Deploy App Engine Project Button" /> available in the Eclipse toolbar.</p>

<p>To be able to deploy your application to Google App Engine, you need to check that your application can be registered, the application ID is stored  in the <code>WEB-INF/lib/appengine-web.xml</code>.</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;appengine-web-app xmlns="http://appengine.google.com/ns/1.0"&gt;
  &lt;application&gt;[your-application-id]&lt;/application&gt;
  &lt;version&gt;1&lt;/version&gt;
  &lt;!-- Configure java.util.logging --&gt;
  &lt;system-properties&gt;
    &lt;property name="java.util.logging.config.file" value="WEB-INF/logging.properties"/&gt;
  &lt;/system-properties&gt;
&lt;/appengine-web-app&gt;
</code></pre>

<p>The App Engine deploy button prompts you for multiple informations: username (your Google account) and password.</p>

<p>When the deployment is complete you can access your application using the following URL:</p>

<p><code>http://[your-application-id].appspot.com/resources/hr/employee</code></p>

<p>or</p>

<p><code>http://[your-application-id].appspot.com/rest/hr/employee</code></p>

<h3>Ading XML and JSON support to the service</h3>

<p>Let&rsquo;s now add new method to manipulate an &ldquo;Employee&rdquo; object using the service, and the data format should be based on JSON and XML. This is where JAXB is useful, since it allows easily to transform marshall/unmarshall Java objects in XML -obviously- and JSON (cool isn&rsquo;t!)</p>

<h4>Creating an Employee Class</h4>

<p>Start with the creation of a new class to manipulate Employee data, this is a very simple Java class that could look like the following code:</p>

<pre><code class="java">package com.grallandco.employee.service.model;
import java.util.Date;

public class Employee {
  private String firstName;
  private String lastName;
  private Date hireDate;
  private String email;
  public Employee(String firstName, String lastName, Date hireDate, String email) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.hireDate = hireDate;
    this.email = email;
  }
  public Employee() {}
    public String getFirstName() {
      return firstName;
    }
    public void setFirstName(String firstName) {
      this.firstName = firstName;
    }
    public String getLastName() {
      return lastName;
    }
    public void setLastName(String lastName) {
      this.lastName = lastName;
    }
    public Date getHireDate() {
      return hireDate;
    }
    public void setHireDate(Date hireDate) {
      this.hireDate = hireDate;
    }
    public String getEmail() {
      return email;
    }
    public void setEmail(String email) {
      this.email = email;
    }
    public String toString() {
      StringBuffer sb = new StringBuffer();
      sb.append("First: ").append(getFirstName());
      sb.append(" - Last: ").append(getLastName());
      sb.append(" - Date: ").append(getHireDate());
      sb.append(" - Email: ").append(getEmail());
      return sb.toString();
    }
  }
</code></pre>

<p>When implementing your &ldquo;real&rdquo; application with some persistence layer
this POJO is the one as JDO/JPA entity.</p>

<h4>Create a Converter class for your entity</h4>

<p>I usually encapsulate all the transformation in some converter class, like that I do not directly couple my business class to the serialisation mechanism. (So I do that for classes and lists of classes). So instead of adding the JAXB annotations to the Employee class itself, let&rsquo;s create an EmployeeConverter class that will be responsible of the transformation and used by your REST service.</p>

<pre><code class="java">package com.grallandco.employee.service.converter;

import java.util.Date;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import com.grallandco.employee.service.model.Employee;

@XmlRootElement(name = "employee")
public class EmployeeConverter {
  private Employee entity = null;
  public EmployeeConverter() {
    entity = new Employee();
  }

  public EmployeeConverter(Employee entity) {
    this.entity = entity;
  }

  @XmlElement
  public String getFirstName() {
    return entity.getFirstName();
  }

  @XmlElement
  public String getLastName() {
    return entity.getLastName();
  }

  @XmlElement
  public Date getHireDate() {
    return entity.getHireDate();
  }

  @XmlElement
  public String getEmail() {
    return entity.getEmail();
  }

  public Employee getEmployee() {
    return entity;
  }

  public void setFirstName(String firstName) {
    entity.setFirstName(firstName);
  }

  public void setHireDate(Date hireDate) {
    entity.setHireDate(hireDate);
  }

  public void setLastName(String email) {
    entity.setEmail(email);
  }

  public void setEmail(String lastName) {
    entity.setLastName(lastName);
  }
}
</code></pre>

<p>You can now update your service to use this utility/converter class to return XML or JSON ojbect based on the content type of the request.</p>

<h4>Add support to JSON and XML to your REST service</h4>

<p>You need to change the <code>EmployeeRessource</code> class, to change the signature and add new annotations of the <code>getEmployee()</code> method.</p>

<p>The annotation you are adding:</p>

<ul>
<li><code>@Produces({"application/xml", "application/json"})</code> : indicates which type of content will be produced by the service. Based on the type of the request.</li>
<li><code>@Path("/employee/{employeeEmail}/")</code> : change the Path to indicate a Path parameter, here for example the URL can accept an email in the URI - not the best example, but you get the point&hellip;</li>
<li><code>public EmployeeConverter getEmployee( @PathParam ("employeeEmail") String email)</code> : change the type returned by the method and take a parameter as String that match the Path param defined in the @Path annotation.</li>
</ul>


<p>Here the complete class code:</p>

<pre><code class="java">package com.grallandco.employee.service.rest.impl;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import com.grallandco.employee.service.converter.EmployeeConverter;
import com.grallandco.employee.service.model.Employee;

@Path("/hr/")
public class EmployeeRessource {


  @GET
  @Produces({"application/xml", "application/json"})
  @Path("/employee/{employeeEmail}/")
  public EmployeeConverter getEmployee( @PathParam ("employeeEmail") String email) {
    //dummy code
    Employee emp = new Employee();
    emp.setEmail(email);
    emp.setFirstName("John");
    emp.setLastName("Doe");
    EmployeeConverter converter = new EmployeeConverter(emp);
    return converter;
  }
}
</code></pre>

<h3>Test the service</h3>

<p>You can now run the server locally and test the service</p>

<p><code>http://localhost:8080/resources/hr/employee/tug@grallandco.com</code></p>

<p>This will return an XML document.</p>

<p>If you want to test the JSON call you have multiple choice:</p>

<ul>
<li>Using following command</li>
</ul>


<pre><code class="bash">tgrall$ curl -H "Accept: application/json" http://localhost:8080/resources/hr/employee/tug@grallandco.com
    {"email":"tug@grallandco.com","firstName":"John","lastName":"Doe"}
</code></pre>

<ul>
<li>Using an HTTP client that allows your to configure/set the HTTP request completely, I am using the <a href="https://addons.mozilla.org/en-US/firefox/addon/2691">Poster Firefox Plugin</a></li>
<li>Using some Javascript code in an application</li>
</ul>


<p>You can repeat the test on your deployed application on Google AppEngine.</p>

<h3>Conclusion</h3>

<p>In this article you have learned how to create and deploy a new REST Service on Google App Engine. This service has been created with the JAX-RS Reference Implementation the Jersey project. In the next article you will learn how to add persistence and create a CRUD Rest service on Google App Engine.</p>
]]></content>
  </entry>
  
</feed>
