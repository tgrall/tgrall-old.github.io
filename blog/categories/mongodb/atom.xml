<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Tug's Blog]]></title>
  <link href="http://tgrall.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://tgrall.github.io/"/>
  <updated>2020-01-02T17:13:18+01:00</updated>
  <id>http://tgrall.github.io/</id>
  <author>
    <name><![CDATA[Tug Grall]]></name>
    <email><![CDATA[tugdual@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDB : Playing With Arrays]]></title>
    <link href="http://tgrall.github.io/blog/2015/04/21/mongodb-playing-with-arrays/"/>
    <updated>2015-04-21T15:45:39+02:00</updated>
    <id>http://tgrall.github.io/blog/2015/04/21/mongodb-playing-with-arrays</id>
    <content type="html"><![CDATA[<p>As you know,  you have many differences between relational and document databases. The biggest, for the developer, is probably the data model: Row versus Document. This is particularly true when we talk about &ldquo;relations&rdquo; versus &ldquo;embedded documents <em>(or values)</em>&rdquo;. Let&rsquo;s look at some examples, then see what are the various operations provided by MongoDB to help you to deal with this.</p>

<!-- more -->


<p>I won&rsquo;t use this post to go in all the details about &ldquo;document design&rdquo;, but I just want to focus on the operations you can to with these arrays/list (so useful operations once you have chosen to embed documents).</p>

<p>Let&rsquo;s use a very simple example based on e-commerce platform, with two document types : <strong><em>user</em></strong> and <strong><em>orders</em></strong>.</p>

<p>The first thing you have, is a simple list of values into a JSON array. Let&rsquo;s look at a user profile where user have a list of interests  (field <code>interested_by</code>) :</p>

<pre><code class="json">{
  "_id" : 654321,
  "first_name" : "John",
  "last_name" : "Doe",
  "interested_by" : [ "electronics", "sports", "music" ],
  "address" : {
    "name" : "John Doe",
    "company" : "Resultri",
    "street" : "1015 Mapple Street",
    "city" : "San Francisco",
    "state" : "CA",
    "zip_code" : 94105
  }
}
</code></pre>

<p>Another thing you do with array, is to represent &ldquo;one-to-many&rdquo; relations. These relations in your RDBMS are based on multiple tables and foreign keys.
In document databases, like MongoDB, these relations are, most of the time, represented using an <em>array of documents</em>, something like (look at the <code>items</code> field):</p>

<pre><code class="json">{
  "_id" : 45218468309,
  "date" : ISODate("2015-01-28T09:40:50.615Z"),
  "customer" : {
    "id" : 654321,
    "name" : "John Doe"
  },
  "ship_to" : {
    "name" : "John Doe",
    "company" : "Resultri",
    "street" : "1015 Mapple Street",
    "city" : "San Francisco",
    "state" : "CA",
    "zip_code" : 94105
  },
  "items" : [
    {
      "sku" : "WA34R",
      "description" : "Wireless Qwerty Keyboard",
      "quantity" : 1,
      "unit_price" : 41.5,
      "price" : 41.5,
      "vat" : 20
    },
    {
      "sku" : "MW003",
      "description" : "MiWatch",
      "quantity" : 2,
      "unit_price" : 245,
      "price" : 490,
      "vat" : 20
    }
  ]
}
</code></pre>

<p>Documents above are not necessary complete, I just want to focus on the various operations you can do on these arrays.</p>

<p><em>Note: you can add these documents into your MongoDB instance, I will use the collections <code>customers</code> and <code>orders</code>.</em></p>

<h3>Adding new interest to the user</h3>

<p>To achieve this you have 2 operators that you can use in your update: <a href="1"><code>$push</code></a> and <a href="2"><code>$addToSet</code></a>. Since these one a very simple I won&rsquo;t go into too much details.</p>

<p>The <code>$push</code> will add the value at the end of the list, if the value already exits it will be added (many copies), this is why it makes sense to use the <code>$addToSet</code> operator, that only add the value if the value does not already exist in the array.</p>

<pre><code>db.customers.update(
  { "_id" : 654321  },
  { "$addToSet" : { "interested_by" :  "sports"}  }
);
</code></pre>

<p>This update command above <strong>will not change</strong> the document since the &ldquo;sports&rdquo; value is already in the list.</p>

<pre><code>db.customers.update(
  { "_id" : 654321  },
  { "$addToSet" : { "interested_by" :  "books"}  }
);
</code></pre>

<p>This <strong>will add</strong> the &ldquo;books&rdquo; value at the end of the list.</p>

<p>If the attribute <code>interested_by</code> does not exist in the document, it will be added with one single entry (here the <code>$push</code> is working the same way ).</p>

<p>If the attribute is not an array, the database will not do anything and return the error <a href="3">#16837</a> <em>&ldquo;The field &lsquo;first_name&rsquo; must be an array but is of type String in document&rdquo;</em>.</p>

<p>Here we use <em>interest</em>, but you can imagine doing the same thing for tagging, or any other business use case with a list of values.</p>

<h3>Adding a new item into an order</h3>

<p>The previous case, is very simple since it is a scalar value. Now I need to add a new order line, it is not harder than before:</p>

<pre><code>db.orders.update(
  { "_id" : 45218468309   },
  {
    "$push" : {
      "items" : {
        "sku" : "MO001",
        "description" : "Bluetooth mouse",
        "quantity" : 1,
        "unit_price" : 20.00,
        "price" : 20.00,
        "vat" : 20.00
      }
    }
  }
);
</code></pre>

<p>So you can see now that the value is added at the end of the list.</p>

<h3>Updating an item in the order</h3>

<p>Let&rsquo;s look at another requirement. Now I need to update for example the quantity of one of the line. In your relational application it is <em>easy</em> in the sense that you have one single record to update(in reality it is a different story since application are using complex data layer).</p>

<p>You can do the same, meaning you can only update the <em>items</em> directly in the array &ndash; (no need to replace the full document or list like I see too often).</p>

<p>For this, you  just need to use the <code>update</code> and <code>$set</code> and specify the positional operation <code>$</code>.</p>

<p>The <code>$</code> operator is a placeholder for the first entry in the array that match the filter (query document) sent to the update/findAndModify command.</p>

<p>In our example, to update a specific line in the order</p>

<p>The proper way is simply to use the an update and <code>$set</code>,
 but you have to select the exact entry in the array in your filter. For example in our case we want to update the number of mouses and the price, this will look like:</p>

<pre><code>db.orders.update(
  {
    "_id" : 45218468309,
    "items.sku" : "MO001"
  },
  {
    "$set" :
    {
        "items.$" : {
          "sku" : "MO001",
          "description" : "Bluetooth mouse",
          "quantity" : 2,
          "unit_price" : 20.00,
          "price" : 40.00,
          "vat" : 20.00
        }
    }
  }
);
</code></pre>

<p>As you can see, the <code>$</code> operator is telling MongoDB to update one specific entry in the array.</p>

<h2>Remove an item from the Array</h2>

<p>You have learned so far that you can easily query and add values into an array; using the same appraoch you can also remove entry in an array. This is done using 3 operators : <code>$pop</code>, <code>$pull</code> and <code>$pullAll</code></p>

<ul>
<li>The <code>$pop</code> operator removes one element from the end of the array</li>
<li>The <code>$pull</code> operator removes <em>all</em> elements in the array that match a specified value.</li>
<li>The <code>$pullAll</code> operator removes <em>all</em> elements in the array that match any of the specified values.</li>
</ul>


<h4>Remove some interests from a customer</h4>

<p>For example, let&rsquo;s remove the &ldquo;electronics&rdquo; interest from the customer id 654321.</p>

<pre><code>db.customers.update(
  { "_id" : 654321  },
  { "$pull" : { "interested_by" :  "electronics"}  }
);
</code></pre>

<p>If you want to remove sports and music interest from the customer you can use the <code>$pullAll</code> operator as follow:</p>

<pre><code>db.customers.update(
  { "_id" : 654321  },
  { "$pullAll" : { "interested_by" :  ["sports","music"]}  }
);
</code></pre>

<p>Here we use <em>interest</em>, but you can imagine doing the same thing for tagging, or any other business use case with a list of values.</p>

<h4>Remove item into an order</h4>

<p>Using the same operator you can also remove a line order (item) from an order document, for example let&rsquo;s remove the line with the item MO001 (Bluetooth mouse). For this we can use the <code>$pull</code> operator with the proper sku.</p>

<pre><code>db.orders.update(
  {
    "_id" : 45218468309,
  },
  {
    "$pull" : { "items" : { "sku" : "MO001" } }
  }
);
</code></pre>

<h3>Conclusion</h3>

<p>In this article you have learn how to create/edit arrays in JSON documents.</p>

<p>In addition to all the update operators, MongoDB provides many operators for querying arrays such as  <a href="5">$size</a> or <a href="4"><code>$elemMatch</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to MongoDB Security]]></title>
    <link href="http://tgrall.github.io/blog/2015/02/04/introduction-to-mongodb-security/"/>
    <updated>2015-02-04T18:55:30+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/02/04/introduction-to-mongodb-security</id>
    <content type="html"><![CDATA[<p>Last week at the Paris MUG, I had a quick chat about security and MongoDB, and I have decided to create this post that explains how to configure out of the box security available in MongoDB.</p>

<p>You can find all information about MongoDB Security in following documentation chapter:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/security/">http://docs.mongodb.org/manual/security/</a></li>
</ul>


<p><img class="center" src="/images/posts/intro-mongodb-security/password.jpg"></p>

<p>In this post, <em>I won&rsquo;t go</em> into the detail about how to deploy your database in a secured environment (DMZ/Network/IP/Location/&hellip;)</p>

<p>I will focus on <strong>Authentication</strong> and <strong>Authorization</strong>, and provide you the steps to secure the access to your database and data.</p>

<p>I have to mention that by default, when you install and start MongoDB, security is not enabled. Just to make it easier to work with.</p>

<p>The first part of the security is the <strong>Authentication</strong>, you have multiple choices documented <a href="http://docs.mongodb.org/manual/core/authentication/">here</a>. Let&rsquo;s focus on &ldquo;MONGODB-CR&rdquo; mechanism.</p>

<p>The second part is <strong>Authorization</strong> to select what a user can do or not once he is connected to the database. The documentation about authorization is available <a href="http://docs.mongodb.org/manual/core/authorization/">here</a>.</p>

<p>Let&rsquo;s now document how-to:</p>

<ol>
<li>Create an Administrator User</li>
<li>Create Application Users</li>
</ol>


<p>For each type of users I will show how to grant specific permissions.</p>

<!-- more -->


<h2>1. Start MongoDB</h2>

<p>As I said before, by default security is not enabled when you start MongoDB; so the first think to do is to enable it using the <code>--auth</code> parameter.</p>

<pre><code>&gt; mkdir /data/db

&gt; mongod --auth

....
....
2015-02-04T06:56:37.875+0100 [conn1] note: no users configured in admin.system.users, allowing localhost access
...
</code></pre>

<p>MongoDB is starting, and until you have created a user you can connect from localhost to create some users (especially the administrator one). This is what is called the <em>localhost exception</em>.</p>

<p>Note: I am here documenting security in simple configuration, I invite you to look to the documentation when deploying a <a href="http://docs.mongodb.org/v2.2/administration/sharded-clusters/#sharded-cluster-security-considerations">Sharded cluster</a>.</p>

<p>Now that we have started MongoDB, we can create users.</p>

<h2>2. Create Admin User</h2>

<p>The first thing is to create an admin user, that can also create users, So we have to:</p>

<ol>
<li>go to the mongo shell</li>
<li>connect to the `admin&#8217; database</li>
<li>create a user and assign him the role <a href="http://docs.mongodb.org/manual/reference/built-in-roles/#userAdminAnyDatabase"><strong>userAdminAnyDatabase</strong></a></li>
</ol>


<pre><code>use admin

var user = {
    "user" : "admin",
    "pwd" : "manager",
    roles : [
        {
            "role" : "userAdminAnyDatabase",
            "db" : "admin"
        }
    ]
}

db.createUser(user);

exit
</code></pre>

<p>Now that you have created a user, in a MongoDB running with <code>--auth</code>, anonymous connections won&rsquo;t be able to do do anything with the database.</p>

<p>You can test for example to execute <code>show dbs</code> or <code>db.coll.insert({'x':0})</code> commands, you&rsquo;ll see authorization errors.</p>

<h3>Connect with the Admnistrator user</h3>

<p>Now that we have an admin user you can connect to the database with this user:</p>

<pre><code>
&gt; mongo admin -u admin -p
</code></pre>

<p>Our admin user, has the role <strong>userAdminAnyDatabase</strong>. With this role you can manage user; but this role cannot read/write data from application datatabases/collections.</p>

<p>So we need now to create a new user for our &ldquo;eCommerce&rdquo; application.</p>

<h2>3. Create Application User</h2>

<p>Now we will create a new user <em>website</em> that is responsible of the ecommerce database.</p>

<pre><code>&gt; mongo admin -u admin -p

use ecommerce

var user = {
    "user" : "website",
    "pwd" : "abc123",
    roles : [
        {
            "role" : "readWrite",
            "db" : "ecommerce"
        }
    ]
}

db.createUser(user);

exit
</code></pre>

<p>This user will be able to read/write on the <em>ecommerce</em> database</p>

<h3>Connect with the application user</h3>

<p>Using the mongo shell you can now connect and create/query data</p>

<pre><code>&gt; mongo ecommerce -u website -p

db.products.insert({ "title" : "MongoDB in Action"  });

db.products.findOne();

db.products.update({}, {"$set" : { "type" : "book" } })
</code></pre>

<p>As you can see this user has the perfect profile for your application.</p>

<p>Note, that if you try to query or modify another database with this user you will receive authorization exceptions.</p>

<h2>Create a reporting user (Read Only)</h2>

<p>You may need in your application, user that can only read data, let&rsquo;s say in all databases. For this you just need to assign the role <strong>readAnyDatabase</strong>.</p>

<pre><code>
&gt; mongo admin -u admin -p

var user = {
    "user" : "reporting",
    "pwd" : "abc123",
    roles : [
        {
            "role" : "readAnyDatabase",
            "db" : "admin"
        }
    ]
}

db.createUser(user);

exit
</code></pre>

<p>This user will be able to query all the databases and collections, including <code>show dbs</code> command.</p>

<p>Let&rsquo;s connect with the reporting user:</p>

<pre><code>&gt; mongo admin -u reporting -p

show dbs

use ecommerce

db.products.find();
</code></pre>

<p>If you try to inser/update/delete document you will receive an exception.</p>

<h2>Add new role to a user</h2>

<p>Let&rsquo;s now see how to add a new role to a user. For example I want to let the admin the power of read and write any database. For this I just need to add the role <strong>readWriteAnyDatabase</strong> to the admin user.</p>

<pre><code>&gt; mongo admin -u admin -p

db.grantRolesToUser(
    "admin",
    [{ "role" : "readWriteAnyDatabase", "db" : "admin" }]
)

db.getUser("admin");
</code></pre>

<p>Using the <code>db.grantRolesToUser</code> command I have added the role to the admin user, and using the <code>db.getUser</code> I can look at the user profile.</p>

<p>Now, admin user should be able to create new databases, collections and documents, let&rsquo;s try:</p>

<pre><code>use hr

db.employees.insert({ "name":"John Doe", "hire_date" : new Date() });

db.organization.insert({ "name" : "Development" });

db.employees.findOne();
</code></pre>

<h2>Create and use custom roles</h2>

<p>Another feature that is used a lot around security is related to the roles. In some case you want to provide multiple roles to a user, for example:</p>

<ul>
<li>all permission on database <em>ecommerce</em></li>
<li>read the collection <em>employees</em> in database <em>hr</em></li>
</ul>


<p>For this you can create a role that provide all the permissions and assign it to users. Let&rsquo;s do that using admin user.</p>

<pre><code>use admin

var role = {
    "role"  : "webSiteManagerRole",
    privileges : [
        {
            "resource": {"db" : "hr", "collection" : "employees"},
            "actions": ["find"]
        }
    ],
    "roles" : [
        {
            "role" : "readWrite",
            "db" : "ecommerce"
        }
    ]
}

db.createRole( role );

var user = {
    "user" : "master",
    "pwd" : "abc123",
    roles : [
        {
            "role" : "webSiteManagerRole",
            "db" : "admin"
        }
    ]
}

db.createUser(user);

exit
</code></pre>

<p>If you connect now with the user &ldquo;master&rdquo;, you will see that, the user:</p>

<ul>
<li>can do anything you want in the ecommerce database</li>
<li>can read the &ldquo;hr.employees&rdquo; collection, on only this</li>
<li>cannot do anything else.</li>
</ul>


<h2>Roles and Privileges</h2>

<p>As you have seen in the previous section, you can create roles, and assign privileges to these roles. This is very powerful and you can really control each action on the database.</p>

<p>I am inviting you to look in detail to the built-in roles and privileges, this will help you a lot to select the proper ones for your application:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/reference/built-in-roles/">Built-in Roles</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/privilege-actions/">Privileges</a></li>
</ul>


<h2>Conclusion</h2>

<p>In this blog post I quickly explained, how to:</p>

<ul>
<li>Use MongoDB Authentication</li>
<li>Create Users</li>
<li>Assign Roles and Privileges for Users.</li>
</ul>


<p>It is interesting to know that everything that I have showed you in the shell could be done from a user interface in <a href="http://mms.mongodb.com">MMS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving My Beers From Couchbase to MongoDB]]></title>
    <link href="http://tgrall.github.io/blog/2015/02/01/moving-my-beers-from-couchbase-to-mongodb/"/>
    <updated>2015-02-01T15:37:46+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/02/01/moving-my-beers-from-couchbase-to-mongodb</id>
    <content type="html"><![CDATA[<p>Few days ago I have posted a <em>joke</em> on Twitter</p>

<blockquote class="twitter-tweet" lang="en"><p>Moving my Java from Couchbase to MongoDB <a href="http://t.co/Wnn3pXfMGi">pic.twitter.com/Wnn3pXfMGi</a></p>&mdash; Tugdual Grall (@tgrall) <a href="https://twitter.com/tgrall/status/559664540041117696">January 26, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So I decided to move it from a simple picture to a <em>real</em> project. Let&rsquo;s look at the two phases of this so called project:</p>

<ul>
<li>Moving the data from Couchbase to MongoDB</li>
<li>Updating the application code to use MongoDB</li>
</ul>


<p>Look at this screencast to see it in action:</p>

<p><iframe width="560" height="420" src="http://www.youtube.com/embed/Fpl74Z0HbC0?color=white&theme=light"></iframe></p>

<!-- more -->


<h2>Moving the data</h2>

<p>I have created a replication server, that uses the Couchbase XDCR protocol to get the document out and insert them into MongoDB. This server use the Couchbase CAPI Server project available <a href="https://github.com/couchbaselabs/couchbase-capi-server">here</a>.</p>

<p>This server will receive all the mutations made in the Couchbase:</p>

<ul>
<li>When a document is inserted or updated the full document is sent</li>
<li>When a document is deleted, only the medata are sent</li>
<li>The <code>replication server</code>, save the data into MongoDB (inserts and/or updates - no delete), and then return the list to Couchbase as part of the XDCR Protocol.</li>
</ul>


<p>One of the challenges is the fact Couchbase does not have the notion of &ldquo;types&rdquo; or &ldquo;collections&rdquo;. You put everything in a <em>bucket</em> and the application code knows how to deal with the data. Not necessary a problem, just a choice of implementation, but make it sometime harder than expected when you want to write tools. So here the logic that I apply in my replication server, to organize the data in multiple collections when it makes sense <em>(and when it is possible)</em>:</p>

<ul>
<li>If the JSON document does not contains a <em>type field</em>, all the documents will be saved in a single collection</li>
<li>If the JSON document contains a <em>type field</em> then a collection will be created for each type and documents will be inserted/updated in these collections</li>
<li>MongoDB does not allow attributes key to have . and $ signs, so it is necessary to change the name with alternative characters. This is done automatically during the copy of the data.</li>
</ul>


<p>All this, and more is configurable in the tool.</p>

<p>As you can see in the screencast this is straightforward.<em>(note that I have only tested very simple use cases and deployment)</em></p>

<p>You can download the tool and the source code here:</p>

<ul>
<li><a href="https://github.com/tgrall/mongodb-cb-replicator">https://github.com/tgrall/mongodb-cb-replicator</a></li>
<li>Download the <a href="http://goo.gl/WkuHBk">MongoCBReplicator.jar</a> file.</li>
</ul>


<h2>Updating the application code</h2>

<p>The next step is to use these data in an application. For this I simply use the Beer Sample Java application available on <a href="https://github.com/couchbaselabs/beersample-java">Couchbase repository</a>.</p>

<p>I just recreated the project and modified few things, to get the application up and running:</p>

<ul>
<li>Change the connection string</li>
<li>Remove the code that generate views</li>
<li>Replace set/get by MongoDB operations</li>
<li>Replace call to the views by simple queries</li>
</ul>


<p>The code of the MongoDBeer application is available here:</p>

<ul>
<li>[<a href="https://github.com/tgrall/mongodbeer">https://github.com/tgrall/mongodbeer</a>]</li>
</ul>


<p>I did not change any business logic, or added features, or even replaced the way navigation and page rendition is made. I just focused on the database access, for example :</p>

<pre><code class="java">
// Couchbase Query
View view = client.getView("beer", "by_name");
    Query query = new Query();
    query.setIncludeDocs(true).setLimit(20);
    ViewResponse result = client.query(view, query);

    ArrayList&lt;HashMap&lt;String, String&gt;&gt; beers =
      new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();
    for(ViewRow row : result) {
      HashMap&lt;String, String&gt; parsedDoc = gson.fromJson(
        (String)row.getDocument(), HashMap.class);

      HashMap&lt;String, String&gt; beer = new HashMap&lt;String, String&gt;();
      beer.put("id", row.getId());
      beer.put("name", parsedDoc.get("name"));
      beer.put("brewery", parsedDoc.get("brewery_id"));
      beers.add(beer);
    }
    request.setAttribute("beers", beers);


// MongoDB Query
DBCursor cursor = db.getCollection("beer").find()
                                                   .sort( BasicDBObjectBuilder.start("name",1).get() )
                                                   .limit(20);
     ArrayList&lt;HashMap&lt;String, String&gt;&gt; beers =
             new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();
     while (cursor.hasNext()) {
         DBObject row = cursor.next();
         HashMap&lt;String, String&gt; beer = new HashMap&lt;String, String&gt;();
         beer.put("id", (String)row.get("_id"));
         beer.put("name", (String)row.get("name"));
         beer.put("brewery", (String)row.get("brewery_id"));
         beers.add(beer);
     }



// Couchbase update
client.set(beerId, 0, gson.toJson(beer));

// MongoDB update
db.getCollection("beer").save(new BasicDBObject(beer));
</code></pre>

<p>I did not attend to optimize the MongoDB code,  but just to replace as few lines of code as possible.</p>

<p>Note: I have not created any index during the process. Obviously if your application have more and more data and you do intense work with it you must analyze your application/queries to see which indexes must be created.</p>

<h2>Adding new features</h2>

<p>Once you have the data into MongoDB you can do a lot more without anything more than MongoDB:</p>

<h4>Full Text Search</h4>

<p>You can create a Text index on various fields in the collection to provide advanced search capabilities to your users.</p>

<pre><code class="json">db.brewery.ensureIndex(
  {
    "name" : "text",
    "description" : "text"
  },
  {
    "weights" :
    {
      "name" : 10,
      "description" : 5
    },
    "name" : "TextIndex"
  }

);
</code></pre>

<p>Then you can query the database using the <code>$text</code> operation, for example all breweries with <em>Belgium</em> and without <em>Ale</em></p>

<pre><code class="json">db.brewery.find( { "$text" : { "$search" : "belgium -ale" }   }  , { "name" : 1  } );
{ "_id" : "daas", "name" : "Daas" }
{ "_id" : "chimay_abbaye_notre_dame_de_scourmont", "name" : "Chimay (Abbaye Notre Dame de Scourmont)" }
{ "_id" : "brasserie_de_cazeau", "name" : "Brasserie de Cazeau" }
{ "_id" : "inbev", "name" : "InBev" }
{ "_id" : "new_belgium_brewing", "name" : "New Belgium Brewing" }
{ "_id" : "palm_breweries", "name" : "Palm Breweries" }
</code></pre>

<h4>Some analytics</h4>

<p>Not sure these queries really make sense, but it is just to show that now you can leverage your documents without the need of any 3rd party tool.</p>

<p>Number of beer by category, from the most common to the less one:</p>

<pre><code class="json">db.beer.aggregate([
  {"$group" : { "_id" : "$category","count" : {"$sum" : 1 } } },
  {"$sort" : { "count" : -1 } },
  {"$project" : {   "category" : "$_id", "count" : 1, "_id" : 0 } }
]);

{ "count" : 1996, "category" : "North American Ale" }
{ "count" : 1468, "category" : null }
{ "count" : 564, "category" : "North American Lager" }
{ "count" : 441, "category" : "German Lager" }
...
...
</code></pre>

<p>Number of beer of a specific ABV by brewery, for example: top 3 breweries with the most beer with an abv greather or equals to a value, let&rsquo;s say 5:</p>

<pre><code class="json">db.beer.aggregate([
... { "$match" : { "abv" : { "$gte" : 5 }  } },
... { "$group" : { "_id" : "$brewery_id", "count" : { "$sum" : 1} }},
... { "$sort" : { "count" : -1 } },
... { "$limit" : 3 }
... ])

{ "_id" : "midnight_sun_brewing_co", "count" : 53 }
{ "_id" : "troegs_brewing", "count" : 33 }
{ "_id" : "rogue_ales", "count" : 31 }
</code></pre>

<h4>Geospatial queries</h4>

<p>The first thing to do with the data is to change the data structure to save the various data into a GeoJSON format, for this we can simply use a script into the MongoDB Shell:</p>

<pre><code class="json">&gt;mongo

use beers

db.brewery.find().forEach(
  function( doc ) {
    var loc = { type : "Point" };
    if (doc.geo &amp;&amp; doc.geo.lat &amp;&amp; doc.geo.lon) {
      loc.coordinates = [ doc.geo.lon , doc.geo.lat  ];
      db.brewery.update( { _id : doc._id } , {$set : { loc : loc } }  );
    }
  }
);

db.brewery.ensureIndex( { "loc" : "2dsphere" } );
</code></pre>

<p>This call take all the breweries and add a new attribute, name <code>loc</code> as a GeoJSON point. I could also chose to remove the old geo information using a &lsquo;$unset&rsquo;, but I did not; let&rsquo;s imagine that some API/applications are using it. This is a good example of flexible schema.</p>

<p>Now I can search for all the brewery that are at less than 30km from the Golden Gate in San Francisco: [-122.478255,37.819929]</p>

<pre><code class="json">db.brewery.find(
  { "loc" :
    { "$near" :
      { "$geometry" :
        {
          "type" : "Point",
          "coordinates" : [-122.478255,37.819929]
        },
        "$maxDistance" : 20000

      }
    }
  }
  , { name : 1 }  
)
</code></pre>

<p>You can also use Geospatial indexes and operators in the aggregation queries used above</p>

<h2>Conclusion</h2>

<p>As as said in the introduction, this week end project started as a joke on Twitter, and finished with a small blog post and Gitub repositories.</p>

<p>My goal here is not to compare the two solutions -I made my choice few months back-  but simply show how you can move from one to the other with almost no effort, not only the data but also the application code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everybody Says “Hackathon”!]]></title>
    <link href="http://tgrall.github.io/blog/2015/01/23/everybody-says-hackathon/"/>
    <updated>2015-01-23T10:54:20+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/01/23/everybody-says-hackathon</id>
    <content type="html"><![CDATA[<h4>TLTR:</h4>

<ul>
<li>MongoDB &amp; Sage organized an internal Hackathon</li>
<li>We use the new X3 Platform based on MongoDB, Node.js and HTML to add cool features  to the ERP</li>
<li>This shows that “any” enterprise can (should) do it to:

<ul>
<li>look differently at software development</li>
<li>build strong team spirit</li>
<li>have fun!</li>
</ul>
</li>
</ul>


<h3>Introduction</h3>

<p>I have like many of you participated to multiple Hackathons where developers, designer and entrepreneurs are working together to build applications in few hours/days. As you probably know more and more companies are running such events internally, it is the case for example at Facebook, Google, but also ING (bank), AXA (Insurance), and many more.</p>

<p>Last week, I have participated to the first Sage Hackathon!</p>

<p>In case you do not know Sage is a 30+ years old ERP vendor. I have to say that I could not imagine that coming from such company… Let me tell me more about it.</p>

<p><img class="center" src="/images/posts/everybody-says-hackathon/00-logo.png"></p>

<!-- more -->


<h3>Sage Hackathon</h3>

<h5>How did it start?</h5>

<p>I have met the development team few months back when I learned that Sage was using MongoDB. We discussed about use cases, architecture,&hellip; And this is when I was the most surprised! The new version of Sage ERP X3 is a mix of legacy components (RDBMS, C++ based proprietary middleware), and brand new layer based on Node.js, MongoDB and HTML/CSS/JS (AngularJS like). The Sage team has open sourced some of the JS libraries, see <a href="https://github.com/sage">https://github.com/sage</a> Pretty cool isn’t?</p>

<p>I was really excited to see how MongoDB and Node.js are used by Sage modernize the ERP. So I asked more and more questions about the product, looked at some demonstrations. This leads to a broader discussion to see how we can use this new architecture to develop more features using it.</p>

<p>This is how we started to talk about an internal hackathon. Everybody, developers, marketing and managers were very excited about the idea.</p>

<h5>Hackathon Preparation</h5>

<p>Sage and MongoDB teams worked together to organize the event, with the following constraints:</p>

<ul>
<li>The hackathon will be a 24h (noon to noon) event, to allow Sage management to have corporate meetings before and after the event,</li>
<li>40 persons limit - 6 teams max - with a mix of developers, designer, product owner, quality engineer, … (coming from various countries),</li>
<li>The event will occur offsite to <em>daily duty noise</em></li>
</ul>


<p>Also since the hackathon will be short, 24h!, we decided to propose in advance many subjects and teams. This to be able to focus on the implementation on D-Day and avoid &ldquo;team and project&rdquo; selection.</p>

<p>So we define a list of 6 ideas that would extend the ERP in a cool way, for example: notification platform, collaboration feature such as business discussion, caching layer with query capabilities, office tool integration, plug social network like LinkedIn and Twitter to ERP business objects,&hellip;</p>

<p>Once we had a good vision of the event, Sage marketing and product management organized an internal presentation to announce the event, and ask for more ideas. We were all surprised to see so many ideas coming out of this presentation!</p>

<h5>Let&rsquo;s code!</h5>

<p>So we all met at the location, a very nice conference center, <a href="http://www.les-fontaines.com/">Les Fontaines</a>, where fresh coffee was waiting for us!</p>

<p>The event started with a very short presentation of the teams, projects, and jury.</p>

<p><img class="center" src="/images/posts/everybody-says-hackathon/01-sage-hack-intro.png" title="Presentation" ></p>

<p>Quickly the teams started to draw things on whiteboard, discuss architecture, and design&hellip; The organizers, included myself, were
very happy to see that everybody was diving into it.</p>

<p><img src="/images/posts/everybody-says-hackathon/02-team-work.png" title="Team Work" > <img src="/images/posts/everybody-says-hackathon/03-motto.png"></p>

<p>MongoDB (<a href="http://twitter.com/alainhelaili">Alain</a> and I), and Sage architects were here to help; so we did. I pushed hard to be sure all the teams start to develop, design
as early as possible. I also gave many advices around document design and other things around MongoDB and node.</p>

<p>In the evening we stopped for a nice dinner, this is the big difference between a startup event, and a corporate one, good wine, soup, duck confit, wine, and fantastic desserts. Yummy!</p>

<p>Let&rsquo;s go back to the code thing, so all the teams were working like crazy on their project. I had lot of interesting discussions with all of them.</p>

<p><img src="/images/posts/everybody-says-hackathon/04-night-coding.png" title="Night Coding" > <img src="/images/posts/everybody-says-hackathon/05-night-coding.png" title="Night Coding" ></p>

<p>I went to bed at 11:30pm, <em>yeah, I am a loser!</em>, while everybody was still working.</p>

<p><img src="/images/posts/everybody-says-hackathon/06-night-coding.png" title="Night Coding" ><img src="/images/posts/everybody-says-hackathon/07-night-coding.png" title="Night Coding" ></p>

<p>I as back in the <em>war room</em> around 6:00am, and helped some team to finish their project.</p>

<p>All the teams used the morning to polish the feature and prepare the demonstration.</p>

<h5>Let&rsquo;s vote!</h5>

<p>At noon each team started to demonstrate their feature in 5mn. All the teams did a live demonstration, with the feature well integrated to the Sage X3 screens.
It was really cool. A team even created a small video clip to explain the feature and vision.</p>

<p><img src="/images/posts/everybody-says-hackathon/08-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/10-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/11-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/12-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/13-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/14-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/15-demonstration.png"> <img src="/images/posts/everybody-says-hackathon/09-demonstration.png"></p>

<p>It was very hard to chose a winner, but we agreed on a very rich and promising notification platform.</p>

<h5>What&rsquo;s next?</h5>

<p>It was really nice for me to see the excitement of all the teams, and the pride of being able to develop something that fast!</p>

<p>I cannot talk for Sage, but I think they all realize something: they can do stuff a lot faster, and this should try to push this into the product now!
It is also a good opportunity to see how to developer and deliver new addons for X3.</p>

<p>On my side, I am very happy of the result, and see that MongoDB and new technologies can really change the way we work with our data. And I hope to be able to do that again
with other companies.</p>

<h3>What about you?</h3>

<p>I believe that any organization that has an IT/Development team should organize such event, for example every year.</p>

<p>Honestly, we can &ldquo;stop&rdquo; working on our daily duties for 1,2 or 3 days and do this. If you look at your agenda, I am sure that you have wasted
more time on none productive meetings; remember :</p>

<blockquote><p>If a picture is worth 1000 words</p>

<p>A prototype is worth 1000 meetings!</p></blockquote>

<p>by @ideo</p>

<p>You will be surprised to see what can be done when you let the passionate people do what they love, but also it will be a good opportunity to motivate your team.</p>

<p>I will be pleased to discuss that you will, so feel free to drop me a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nantes MUG : Event #2]]></title>
    <link href="http://tgrall.github.io/blog/2015/01/21/nantes-mug-event-number-2/"/>
    <updated>2015-01-21T07:18:06+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/01/21/nantes-mug-event-number-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.meetup.com/Nantes-MongoDB-User-Group/events/218926859/">Last night</a> the Nantes MUG (<a href="http://www.mongodb.org/user-groups">MongoDB Users Group</a>) had its second event. More than 45 people signed up and joined us at the <a href="http://www.epitech.eu/nantes/ecole-informatique-nantes.aspx">Epitech schoo</a>l (thanks for this!). &nbsp;We were lucky to have 2 talks from local community members:</p>

<ul>
<li>How “MyScript Cloud” uses MongoDB by <a href="https://twitter.com/mathieuruellan">Mathieu Ruellan</a></li>
<li>Aggregation Framework by <a href="https://twitter.com/sebprunier">Sebastien Prunier</a></li>
</ul>


<!-- more -->


<h3>How “MyScript Cloud” uses MongoDB</h3>

<p>First of all, if you do not know <a href="http://myscript.com/">MyScript</a>&nbsp;I invite you to play with the <a href="http://webdemo.myscript.com/#/home">online demonstration</a>.&nbsp;I am pretty sure that you are already using this technology without noticing it, since it is embedded in many devices/applications including: your car look at the <a href="http://vimeo.com/49013364">Audi Touchpad</a>!</p>

<p>That said Mathieu was not here to talk about the cool features and applications of MyScript but to explain how MongoDB is used to run their cloud product.&nbsp;
Mathieu explained how you can use <a href="https://dev.myscript.com/dev-kits/cloud-development-kit/">MyScript SDK</a> online. You just need to call a REST API to add Handwriting Recognition to your application. Let&rsquo;s make the long story short, and see how MongoDB was chosen and how it is used today:</p>

<ul>
<li>The prototype was done with a single RDBMS instance</li>
<li>With the success of the project MyScript Cloud the team had to move to a more flexible solution:

<ul>
<li>Flexible schema to support heterogeneous structures,</li>
<li>Highly available solution with automatic failover,</li>
<li>Multi datacenter supports with localized read,</li>
</ul>
</li>
<li>This is when Mathieu looked at different solution and selected MongoDB and deployed it on AWS.</li>
</ul>


<p>Mathieu highlighted the following points:</p>

<ul>
<li>Deploy and Manage a Replica Set is really easy, and it is done on multiple AWS data centers,</li>
<li>Use the proper <a href="http://docs.mongodb.org/manual/core/read-preference/">read preference</a>&nbsp; (nearest in this case) to deliver the data as fast as possible,</li>
<li>Develop with JSON Documents provides lot of flexibility to the developers, that can add new features faster.</li>
</ul>


<p><img class="center <a" src="href="http://4.bp.blogspot.com/-AWHn75hAyBY/VL9EMpRrFVI/AAAAAAAAAwA/CrDMkKL5A1Y/s1600/IMG_3743.jpg">http://4.bp.blogspot.com/-AWHn75hAyBY/VL9EMpRrFVI/AAAAAAAAAwA/CrDMkKL5A1Y/s1600/IMG_3743.jpg</a>&#8221;></p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/43741214 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<h3>Aggregation Framework</h3>

<p>Sebastien &ldquo;Seb&rdquo; is software engineering at SERLI and working with MongoDB for more than 2 years now. Seb introduced the reasons why aggregations are needed in applications and the various ways of doing it with <a href="http://docs.mongodb.org/manual/aggregation/">MongoDB</a>: simple queries, map reduce, and aggregation pipeline; with a focus on a Aggregation Pipeline.</p>

<p>Using cool demonstrations, Seb explained in a step by step approach the key features and capabilities of MongoDB <a href="http://docs.mongodb.org/manual/core/aggregation-pipeline/">Aggregation Pipeline</a>:</p>

<ul>
<li>$match, $group, &hellip;</li>
<li>$unwind arrays</li>
<li>$sort and $limit</li>
<li>$geonear</li>
</ul>


<p>To close his presentation, Seb talked about aggregation best practices, and behavior&nbsp;<a href="http://docs.mongodb.org/manual/core/aggregation-pipeline-sharded-collections/#aggregation-pipeline-sharded-collection">in a sharded cluster</a>.</p>

<p><img class="center <a" src="href="http://4.bp.blogspot.com/-1fK-Q5SmL4s/VL9EQiaUIvI/AAAAAAAAAwI/AMVYrmQDPVg/s1600/IMG_3745.jpg">http://4.bp.blogspot.com/-1fK-Q5SmL4s/VL9EQiaUIvI/AAAAAAAAAwI/AMVYrmQDPVg/s1600/IMG_3745.jpg</a>&#8221;></p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/43730356 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<h3>And&hellip;</h3>

<p>As usual the event ended with some drinks and a late dinner!</p>

<p>This event was really great and I am very happy to see what people are doing with MongoDB, including storing <em>ink</em> like MyScript, thanks again to the speakers!</p>

<p>This brings me to the last point : MUGs are driven by the community. You are using MongoDB and want to talk about what you, do not hesitate to reach out the organizers they will be more than happy to have you.</p>

<p>You can find a MUG near you, <a href="http://www.mongodb.org/user-groups">look here</a>.</p>
]]></content>
  </entry>
  
</feed>
