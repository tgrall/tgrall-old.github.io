<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ssl | Tug's Blog]]></title>
  <link href="http://tgrall.github.io/blog/categories/ssl/atom.xml" rel="self"/>
  <link href="http://tgrall.github.io/"/>
  <updated>2020-01-02T17:50:47+01:00</updated>
  <id>http://tgrall.github.io/</id>
  <author>
    <name><![CDATA[Tug Grall]]></name>
    <email><![CDATA[tugdual@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use SSL/TLS With Redis Enterprise]]></title>
    <link href="http://tgrall.github.io/blog/2020/01/02/how-to-use-ssl-slash-tls-with-redis-enterprise/"/>
    <updated>2020-01-02T10:47:13+01:00</updated>
    <id>http://tgrall.github.io/blog/2020/01/02/how-to-use-ssl-slash-tls-with-redis-enterprise</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/how-to-use-ssl-slash-tls-with-redis-enterprise/000_header.jpeg"></p>

<p>In this article, I will explain how to secure your Redis databases using SSL (Secure Sockets Layer). In production, it is a good practice to use SSL to protect the data that are moving between various computers (client applications and Redis servers). Transport Level Security (TLS) guarantees that only allowed applications/computers are connected to the database, and also that data is not viewed or altered by a middle man process.</p>

<p>You can secure the connections between your client applications and Redis cluster using:</p>

<ul>
<li>One-Way SSL: the client (your application) get the certificate from the server (Redis cluster), validate it, and then all communications are encrypted</li>
<li>Two-Way SSL: (aka mutual SSL) here both the client and the server authenticate each other and validate that both ends are trusted.</li>
</ul>


<p>In this article, I will focus on the Two-Way SSL, and using Redis Enterprise.</p>

<!-- more -->


<p>Prerequisites:</p>

<ul>
<li>A Redis Enterprise 5.4.x database, (my database is protected by the password <code>secretdb01</code>, and listening on port <code>12000</code>)</li>
<li><code>redis-cli</code> to run basic commands</li>
<li>Python, Node, and Java installed if you want to test various languages.</li>
</ul>


<p><strong>Simple  Test</strong></p>

<p>Let&rsquo;s make sure that the database is available:</p>

<pre><code>redis-cli -p 12000 -a secretdb01 INFO SERVER
</code></pre>

<p>This should print the Server information.</p>

<h4>1- Get the Certificate from Redis Cluster</h4>

<p>You have access to the Redis Enterprise Cluster, you go to one of the nodes to retrieve the certificate (that is a self-generated one by default).</p>

<p>The cluster certificate is located at: <code>/etc/opt/redislabs/proxy_cert.pem</code>.</p>

<p>You have to copy it on each client machine; note that once it is done you can use this certificate to connect using &ldquo;One-Way SSL&rdquo;, but not the purpose of this article.</p>

<p>In my demonstration I am using Docker and copy the certificate using this command from my host:</p>

<pre><code>docker cp redis-node1:/etc/opt/redislabs/proxy_cert.pem ./certificates
</code></pre>

<h4>2- Generate a New Client Certificate</h4>

<p>Using the Two-Way SSL you need to have a certificate for the client that will be used by Redis database proxy to trust the client.</p>

<p>In this article I will use a self-signed certificate using OpenSSL, in this example, we are creating a certificate for an application named <code>app_001</code>.</p>

<p>You can create as many certificates as you want, or reuse this one for all servers/applications.</p>

<p>Open a terminal and run the following commands:</p>

<pre><code class="bash ">
openssl req \
  -nodes \
 -newkey rsa:2048 \
 -keyout client_key_app_001.pem \
 -x509 \
 -days 36500 \
 -out client_cert_app_001.pem
</code></pre>

<p>This command generate a new client key (<code>client_key_001.pem</code>) and certificate (<code>client_cert_001.pem</code>) with no passphrase.</p>

<h4>3- Configure the Redis Database</h4>

<p>The next step is to take the certificate and add it to the database you want to protect.</p>

<p>Let&rsquo;s copy the certificate and paste it into the Redis Enterprise Web Console.</p>

<p>Copy the certificate in your clipboard:</p>

<p>Mac:
<code>bash
pbcopy &lt; client_cert_app_001.pem
</code></p>

<p>Linux:
<code>bash
 xclip -sel clip &lt; client_cert_app_001.pem
</code></p>

<p>Windows:
<code>bash
clip &lt; client_cert_app_001.pem
</code></p>

<p>Go to the Redis Enterprise Admin Web Console and enable TLS on your database:</p>

<ol>
<li>Edit the database configuration</li>
<li>Check TLS</li>
<li>Select &ldquo;Require TLS for All communications&rdquo;</li>
<li>Check &ldquo;Enforce client authentication&rdquo;</li>
<li>Paste the certificate in the text area</li>
<li>Click the Save button to save the certificate</li>
<li>Click the Update button to save the configuration.</li>
</ol>


<p><img class="center" src="/images/posts/how-to-use-ssl-slash-tls-with-redis-enterprise/001-tls-configuration.png"></p>

<p>The database is now protected, and it is mandatory to use the SSL certificate to connect to it.</p>

<pre><code>redis-cli -p 12000 -a secretdb01 INFO SERVER
(error) ERR unencrypted connection is prohibited
</code></pre>

<h4>4- Connect to the Database using the Certificate</h4>

<p>In all following examples, I am using a &ldquo;self-signed&rdquo; certificate, so I do not check the validity of the hostname.
You should adapt the connections/TLS information based on your certificate configuration.</p>

<h4>4.1 Using Redis-CLI</h4>

<p>To connect to a SSL protected database using <code>redis-cli</code> you have to use <a href="https://www.stunnel.org/index.html"><code>stunnel</code></a>.</p>

<p>Create a <code>stunnel.conf</code> file with the following content:</p>

<pre><code>cert = /path_to/certificates/client_cert_app_001.pem
key = /path_to/certificates/client_key_app_001.pem
cafile = /path_to/certificates/proxy_cert.pem
client = yes

[redislabs]
accept = 127.0.0.1:6380
connect = 127.0.0.1:12000
</code></pre>

<p>Start stunnel using the command</p>

<pre><code>stunnel ./stunnel.conf
</code></pre>

<p>This will start a process that listen to port <code>6380</code> and used as a proxy to the Redis Enterprise database on port <code>12000</code>.</p>

<pre><code>redis-cli -p 6380 -a secretdb01 INFO SERVER
</code></pre>

<h5>4.2 Using Python</h5>

<p>Using Python, you have to set the SSL connection parameters:</p>

<pre><code class="python">#!/usr/local/bin/python3

import redis
import pprint

try:
  r = redis.StrictRedis(
    password='secretdb01',
    decode_responses=True,
    host='localhost',
    port=12000,
    ssl=True, 
    ssl_keyfile='./client_key_app_001.pem', 
    ssl_certfile='./client_cert_app_001.pem', 
    ssl_cert_reqs='required', 
    ssl_ca_certs='./proxy_cert.pem',
    )

  info = r.info()
  pprint.pprint(info)

except Exception as err:
  print("Error connecting to Redis: {}".format(err))
</code></pre>

<p>More information in the documentation &ldquo;<a href="https://redislabs.com/lp/python-redis/">Using Redis with Python</a>&rdquo;.</p>

<h5>4.3 Using Node.JS</h5>

<p>For <a href="http://redis.js.org/">Node Redis</a>, use the <a href="https://nodejs.org/api/tls.html">TLS</a> library to configure the client connection:</p>

<pre><code class="javascript">var redis = require("redis");
var tls = require('tls');
var fs = require('fs');

var ssl = {
    key: fs.readFileSync('../certificates/client_key_app_001.pem',encoding='ascii'),
    cert: fs.readFileSync('../certificates/client_cert_app_001.pem',encoding='ascii'),
    ca: [ fs.readFileSync('../certificates/proxy_cert.pem',encoding='ascii') ],
    checkServerIdentity: () =&gt; { return null; },
};

var client = redis.createClient(12000,'127.0.0.1', 
    {
      password : 'secretdb01',
      tls: ssl
    }
);

client.info( "SERVER", function (err, reply) {
    console.log(reply);
} );
</code></pre>

<p>More information in the documentation &ldquo;<a href="https://redislabs.com/lp/node-js-redis/">Using Redis with Node.js</a>&rdquo;.</p>

<h5>4.4 Using Java</h5>

<p>In Java, to be able to connect using SSL, you have to install all the certificates in the Java environment using the <a href="https://docs.oracle.com/en/java/javase/11/tools/keytool.html">keytool</a> utility.</p>

<p>Create a <strong>keystore</strong> file that stores the key and certificate you have created earlier:</p>

<pre><code>openssl pkcs12 -export \
  -in ./client_cert_app_001.pem \
  -inkey ./client_key_app_001.pem \
  -out client-keystore.p12 \
  -name "APP_01_P12"
</code></pre>

<p>As you can see the keystore is used to store the credentials associated with you client; it will be used later with the <code>-javax.net.ssl.keyStore</code> system property in the Java application.</p>

<p>In addition to the keys tore, you also have to create a trust store, that is used to store other credentials for example in our case the redis cluster certificate.</p>

<p>Create a <strong>trust store</strong> file and add the Redis cluster certificate to it</p>

<pre><code>keytool -genkey \
  -dname "cn=CLIENT_APP_01" \
  -alias truststorekey \
  -keyalg RSA \
  -keystore ./client-truststore.p12 \
  -keypass secret
  -storepass secret
  -storetype pkcs12
</code></pre>

<pre><code>keytool -import \
  -keystore ./client-truststore.p12 \
  -file ./proxy_cert.pem \
  -alias redis-cluster-crt
</code></pre>

<p>The trustore will be used later with the <code>-javax.net.ssl.trustStore</code> system property in the Java application.</p>

<pre><code>-Djavax.net.ssl.keyStore=/Users/tgrall/projects/demos/ssl/blog/certificates/java/client-keystore.p12
-Djavax.net.ssl.keyStorePassword=secret
-Djavax.net.ssl.trustStore=/Users/tgrall/projects/demos/ssl/blog/certificates/java/client-truststore.p12
-Djavax.net.ssl.trustStorePassword=secret
</code></pre>

<p>For this example and simplicity, I will hard code these property in the Java code itself:</p>

<pre><code class="java">
import redis.clients.jedis.Jedis;
import java.net.URI;

public class SSLTest {

    public static void main(String[] args) {

        System.setProperty("javax.net.ssl.keyStore", "/path_to/certificates/client-keystore.p12");
        System.setProperty("javax.net.ssl.keyStorePassword", "secret");

        System.setProperty("javax.net.ssl.trustStore","/path_to/certificates/client-truststore.p12");
        System.setProperty("javax.net.ssl.trustStorePassword","secret");

        URI uri = URI.create("rediss://127.0.0.1:12000");

        Jedis jedis = new Jedis(uri);
        jedis.auth("secretdb01");


        System.out.println(jedis.info("SERVER"));
        jedis.close();
    }

}
</code></pre>

<ul>
<li>line 8-12, the system environment variables are set to point to the keystore and trust store (this should be externalized)</li>
<li>line 14, the Redis URL start with <code>rediss</code> with 2 s to indicate that the connection should be encrypted</li>
<li>line 17, set the database password</li>
</ul>


<p>More information in the documentation &ldquo;<a href="https://redislabs.com/lp/redis-java/">Using Redis with Java</a>&rdquo;.</p>

<h2>Conclusion</h2>

<p>In this article, you have learned how to:</p>

<ul>
<li>retrieve the Redis Server certificate</li>
<li>generate a client certificate</li>
<li>protect your database to enforce transport level security (TLS) with 2 ways authentication</li>
<li>connect to the database from <code>redis-cli</code>, Python, Node and Java</li>
</ul>

]]></content>
  </entry>
  
</feed>
