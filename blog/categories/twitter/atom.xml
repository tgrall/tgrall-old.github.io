<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Twitter | Tug's Blog]]></title>
  <link href="http://tgrall.github.io/blog/categories/twitter/atom.xml" rel="self"/>
  <link href="http://tgrall.github.io/"/>
  <updated>2019-09-19T05:47:46+02:00</updated>
  <id>http://tgrall.github.io/</id>
  <author>
    <name><![CDATA[Tug Grall]]></name>
    <email><![CDATA[tugdual@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screencast : Fun With Couchbase MapReduce and Twitter]]></title>
    <link href="http://tgrall.github.io/blog/2013/04/29/screencast-fun-with-couchbase-mapreduce-and-twitter/"/>
    <updated>2013-04-29T09:51:36+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/04/29/screencast-fun-with-couchbase-mapreduce-and-twitter</id>
    <content type="html"><![CDATA[<p>I have created this simple screencast to show how you can, using Couchbase do some realtime analysis based on Twitter feed.</p>

<p>The key steps of this demonstration are</p>

<ol>
<li>Inject Tweets using a simple program available on my Github <a href="https://github.com/tgrall/couchbase-twitter-injector">Couchbase-Twitter-Injector</a></li>
<li>Create views to index and query the Tweets by

<ul>
<li>User name</li>
<li>Tags</li>
<li>Date</li>
</ul>
</li>
</ol>


<p>The views that I used in this demonstration are available at the bottom of this post.</p>

<p><iframe width="560" height="420" src="http://www.youtube.com/embed/X167R0TV5QE?color=white&theme=light"></iframe></p>

<p>Views:</p>

<p><div><script src='https://gist.github.com/1df10b10c9dd387995cb.js'></script>
<noscript><pre><code>function (doc, meta) {
  if (doc.created_at) {
   emit( dateToArray(doc.created_at));
  }
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couchbase : Create a Large Dataset Using Twitter and Java]]></title>
    <link href="http://tgrall.github.io/blog/2012/11/05/couchbase-create-a-large-dataset-using-twitter-and-java/"/>
    <updated>2012-11-05T21:11:00+01:00</updated>
    <id>http://tgrall.github.io/blog/2012/11/05/couchbase-create-a-large-dataset-using-twitter-and-java</id>
    <content type="html"><![CDATA[<p>An easy way to create large dataset when playing/demonstrating Couchbase -or any other NoSQL engine- is to inject Twitter feed into your database.</p>

<p>For this small application I am using:</p>

<ul>
<li><a href="http://www.couchbase.com/downloads-all#couchbase-server-2-0">Couchbase Server 2.0 Server</a></li>
<li><a href="http://www.couchbase.com/develop/java/next">Couchbase Java SDK</a> (will be installed by Maven)</li>
<li><a href="http://twitter4j.org/">Twitter4J</a> (will be installed by Maven)</li>
<li><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a> called using Twitter4J</li>
</ul>


<p>In this example I am using Java to inject Tweets into Couchbase, you can obviously use another langage if you want to.</p>

<p>The sources of this project are available on my Github repository <a href="https://github.com/tgrall/couchbase-twitter-injector"> Twitter Injector for Couchbase</a> you can also download the Binary version <a href="https://github.com/downloads/tgrall/couchbase-twitter-injector/CouchbaseTwitterInjector.jar">here</a>, and execute the application from the command line, see <a href="http://www.blogger.com/blogger.g?blogID=785895453418216075#runTheApp">Run The Application paragraph</a>. Do not forget to create your Twitter oAuth keys (see next paragraph)</p>

<h4>Create oAuth Keys</span></h4>

<p>The first thing to do to be able to use the Twitter API is to create a set of keys. If you want to learn more about all these keys/tokens take a look to the oAuth protocol : <a href="http://oauth.net/">http://oauth.net/</a></p>

<p>1- Log in into the Twitter Development Portal : <a href="https://dev.twitter.com/">https://dev.twitter.com/</a></p>

<p>2- Create a new Application</p>

<p>Click on the &ldquo;Create an App&rdquo; link or go into the &ldquo;User Menu &gt; My Applications &gt; Create a new application&rdquo;</p>

<p>3- Enter the Application Details information</p>

<p><img class="<a" src="href="http://4.bp.blogspot.com/-zxOaF_YLaO0/UJhoZOhjoJI/AAAAAAAAAVk/7HnRfFRSKxs/s320/couchbase-twitter-001.png">http://4.bp.blogspot.com/-zxOaF_YLaO0/UJhoZOhjoJI/AAAAAAAAAVk/7HnRfFRSKxs/s320/couchbase-twitter-001.png</a>&#8221;></p>

<p>4- Click &ldquo;Create Your Twitter Application&rdquo; button</p>

<p>Your application&rsquo;s OAuth settings are now available :</p>

<p><img class="<a" src="href="http://3.bp.blogspot.com/-ZdaST7c-HdY/UJhqi8WJMGI/AAAAAAAAAVs/ndeXQwc4F0k/s320/couchbase-twitter-002.png">http://3.bp.blogspot.com/-ZdaST7c-HdY/UJhqi8WJMGI/AAAAAAAAAVs/ndeXQwc4F0k/s320/couchbase-twitter-002.png</a>&#8221;></p>

<p>5- Go down on the Application Settings page and click on the &ldquo;Create My Access Token&rdquo; button</p>

<p><img class="<a" src="href="http://4.bp.blogspot.com/-WIW2AN93n6k/UJhrfZV1AVI/AAAAAAAAAV0/OseQ1EOpg9k/s320/couchbase-twitter-003.png">http://4.bp.blogspot.com/-WIW2AN93n6k/UJhrfZV1AVI/AAAAAAAAAV0/OseQ1EOpg9k/s320/couchbase-twitter-003.png</a>&#8221;></p>

<p>You have now all the necessary information to create your application:</p>

<ul>
<li>Consumer key</li>
<li>Consumer secret</li>
<li>Access token</li>
<li>Access token secret</li>
</ul>


<p>These keys will be uses in the <code>twitter4j.properties</code> file when running the Java application from the command line</p>

<h4>Create the Java Application</h4>

<p>The following code is the main code of the application:</p>

<p><div><script src='https://gist.github.com/4022377.js'></script>
<noscript><pre><code>package com.couchbase.demo;

import com.couchbase.client.CouchbaseClient;
import org.json.JSONException;
import org.json.JSONObject;
import twitter4j.*;
import twitter4j.json.DataObjectFactory;


import java.io.InputStream;
import java.net.URI;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class TwitterInjector {

    public final static String COUCHBASE_URIS = &quot;couchbase.uri.list&quot;;
    public final static String COUCHBASE_BUCKET = &quot;couchbase.bucket&quot;;
    public final static String COUCHBASE_PASSWORD = &quot;couchbase.password&quot;;

    private List&lt;URI&gt; couchbaseServerUris = new ArrayList&lt;URI&gt;();
    private String couchbaseBucket = &quot;default&quot;;
    private String couchbasePassword = &quot;&quot;;


    public static void main(String[] args) {
        TwitterInjector twitterInjector = new TwitterInjector();
        twitterInjector.setUp();
        twitterInjector.injectTweets();
    }

    private void setUp() {
        try {
            Properties prop = new Properties();
            InputStream in = TwitterInjector.class.getClassLoader().getResourceAsStream(&quot;twitter4j.properties&quot;);
            if (in == null) {
                throw new Exception(&quot;File twitter4j.properties not found&quot;);
            }
            prop.load(in);
            in.close();

            if (prop.containsKey(COUCHBASE_URIS)) {
                String[] uriStrings =  prop.getProperty(COUCHBASE_URIS).split(&quot;,&quot;);
                for (int i=0; i&lt;uriStrings.length; i++) {
                    couchbaseServerUris.add( new URI( uriStrings[i] ) );
                }

            } else {
                couchbaseServerUris.add( new URI(&quot;http://127.0.0.1:8091/pools&quot;) );
            }

            if (prop.containsKey(COUCHBASE_BUCKET)) {
                couchbaseBucket = prop.getProperty(COUCHBASE_BUCKET);
            }

            if (prop.containsKey(COUCHBASE_PASSWORD)) {
                couchbasePassword = prop.getProperty(COUCHBASE_PASSWORD);

            }

        } catch (Exception e) {
            System.out.println( e.getMessage() );
            System.exit(0);
        }


    }



    private void injectTweets() {
        TwitterStream twitterStream = new TwitterStreamFactory().getInstance();
        try {
            final CouchbaseClient cbClient = new CouchbaseClient( couchbaseServerUris , couchbaseBucket , couchbasePassword );
            System.out.println(&quot;Send data to : &quot;+  couchbaseServerUris +&quot;/&quot;+ couchbaseBucket );
            StatusListener listener = new StatusListener() {

                @Override
                public void onStatus(Status status) {
                    String twitterMessage = DataObjectFactory.getRawJSON(status);

                    // extract the id_str from the JSON document
                    // see : https://dev.twitter.com/docs/twitter-ids-json-and-snowflake
                    try {
                        JSONObject statusAsJson = new JSONObject(twitterMessage);
                        String idStr = statusAsJson.getString(&quot;id_str&quot;);
                        cbClient.add( idStr ,0, twitterMessage  );
                        System.out.print(&quot;.&quot;);
                    } catch (JSONException e) {
                        e.printStackTrace(); 
                    }
                }

                @Override
                public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {
                }

                @Override
                public void onTrackLimitationNotice(int numberOfLimitedStatuses) {
                }

                @Override
                public void onScrubGeo(long userId, long upToStatusId) {
                }

                @Override
                public void onException(Exception ex) {
                    ex.printStackTrace();
                }
            };

        twitterStream.addListener(listener);
        twitterStream.sample();

        } catch (Exception e) {
            e.printStackTrace();  
        }
    }



}
</code></pre></noscript></div>
</p>

<p>Some basic explanation:</p>

<ul>
<li>The <code>setUp()</code> method simply reads the <code>twitter4j.properties</code> file from the classpath to build the Couchbase connection string.</li>
<li>The <code>injectTweets</code> opens the Couchbase connection -line 76- and calls the TwitterStream API.</li>
<li>A Listener is created and will receive all the <code>onStatus(Status status)</code> from Twitter. The most important method is onStatus() that receive the message and save it into Couchbase.</li>
<li>One interesting thing : since Couchbase is a JSON Document database it allows your to just take the JSON String and save it directly. <code>cbClient.add(idStr,0 ,twitterMessage);</code></li>
</ul>


<h4>Packaging</h4>

<p>To be able to execute the application directly from the Jar file, I am using the assembly plugin with the following informations from the pom.xml:</p>

<pre><code class="xml">  ...
&lt;archive&gt;
&lt;manifest&gt;
&lt;mainclass&gt;com.couchbase.demo.TwitterInjector&lt;/mainclass&gt;
&lt;/manifest&gt;
&lt;manifestentries&gt;
&lt;class-path&gt;.&lt;/class-path&gt;
&lt;/manifestentries&gt;
&lt;/archive&gt;
...
</code></pre>

<p>Some information:</p>

<ul>
<li>The mainClass</span> entry allows you to set which class to execute when running java -jar</span> command.</li>
<li>The Class-Path</span> entry allows you to set the current directory as part of the classpath where the program will search for the twitter4j.properties</span> file.</li>
<li>The assembly file is also configure to include all the dependencies (Twitter4J, Couchbase client  SDK, &hellip;)</li>
</ul>


<p>If you do want to build it from the sources, simply run :</p>

<pre><code class="sh">mvn clean package
</code></pre>

<p>This will create the following Jar file ./target/CouchbaseTwitterInjector.jar</span></p>

<h4>Run the Java Application</span></h4>

<p>Before running the application you must create a twitter4j.properties file with the following information :</p>

<pre><code class="sh">twitter4j.jsonStoreEnabled=true

oauth.consumerKey=[YOUR CONSUMER KEY]
oauth.consumerSecret=[YOUR CONSUMER SECRET KEY]
oauth.accessToken=[YOUR ACCESS TOKEN]
oauth.accessTokenSecret=[YOUR ACCESS TOKEN SECRET]

couchbase.uri.list=http://127.0.0.1:8091/pools
couchbase.bucket=default
couchbase.password=
</code></pre>

<p>Save the properties file and from the same location run:</p>

<pre><code class="sh">jar -jar [path-to-jar]/CouchbaseTwitterInjector.jar
</code></pre>

<p>This will inject Tweets into your Couchbase Server. Enjoy !</p>
]]></content>
  </entry>
  
</feed>
